{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WindyTracker","text":"<p>A Python library</p>"},{"location":"#get-started","title":"Get Started","text":"<ol> <li>Get API Key: Register at CTA Developer Portal</li> <li>Install Library: <code>uv add windytracker[all]</code></li> <li>Follow Quick Start Guide</li> <li>Check API Reference</li> </ol> <p>Data provided by Chicago Transit Authority. WindyTracker is not affiliated with, endorsed by, or sponsored by CTA. The Chicago Transit Authority (CTA) API - track buses and trains in real-time.</p> <p>Data provided by CTA</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Bus &amp; Train Tracking - Real-time locations, predictions, and route information</li> <li>Sync &amp; Async - Both synchronous and asynchronous support  </li> <li>Typed &amp; Untyped - Raw JSON responses or validated Pydantic models</li> </ul>"},{"location":"#quick-install","title":"Quick Install","text":"<pre><code>uv add windytracker[all]    # All features\nuv add windytracker[sync]   # Sync only\nuv add windytracker[async]  # Async only\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from windytracker import BusTracker\n\n# Initialize with your API key\ntracker = BusTracker(key=\"your_api_key\")\n\n# Get bus predictions\npredictions = tracker.getpredictions(stpid=\"1001\")\n</code></pre>"},{"location":"#get-started_1","title":"Get Started","text":"<ol> <li>Get API Key: Register at CTA Developer Portal</li> <li>Install Library: <code>pip install cta[all]</code></li> <li>Follow Quick Start Guide</li> <li>Check API Reference</li> </ol>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Get up and running with WindyTracker in just a few minutes!</p> <p>Data provided by CTA</p>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#option-1-all-features-recommended","title":"Option 1: All Features (Recommended)","text":"<pre><code>pip install cta[all]  # Includes sync + async support\n</code></pre>"},{"location":"quickstart/#option-2-sync-or-async-only","title":"Option 2: Sync or Async Only","text":"<pre><code>uv add windytracker[all]  # All features (recommended)\nuv add windytracker[sync]   # Synchronous only\nuv add windytracker[async]  # Asynchronous only\n</code></pre>"},{"location":"quickstart/#get-api-key","title":"Get API Key","text":"<ol> <li>Visit CTA Developer Portal</li> <li>Click \"Request API Access\" and fill out the form</li> <li>Wait for approval (1-2 business days)</li> <li>Save your API key securely</li> </ol>"},{"location":"quickstart/#store-api-key-safely","title":"Store API Key Safely","text":"Environment Variable (Recommended).env File <pre><code>export CTA_API_KEY=\"your_api_key_here\"\n</code></pre> <pre><code>import os\nfrom windytracker import BusTracker\n\napi_key = os.getenv(\"CTA_API_KEY\")\ntracker = BusTracker(key=api_key)\n</code></pre> <pre><code># .env file\nCTA_API_KEY=your_api_key_here\n</code></pre> <pre><code>from dotenv import load_dotenv\nimport os\nfrom windytracker import BusTracker\n\nload_dotenv()\napi_key = os.getenv(\"CTA_API_KEY\")\ntracker = BusTracker(key=api_key)\n</code></pre>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"quickstart/#bus-tracking","title":"Bus Tracking","text":"<pre><code>from windytracker import BusTracker\n\n# Initialize\ntracker = BusTracker(key=\"your_api_key\")\n\n# Get all routes\nroutes = tracker.getroutes()\n\n# Get predictions for a stop\npredictions = tracker.getpredictions(stpid=\"1001\")\n\n# Get vehicles on a route\nvehicles = tracker.getvehicles(rt=\"22\")\n\n# Get stops on a route\nstops = tracker.getstops(rt=\"22\", dir=\"Northbound\")\n</code></pre>"},{"location":"quickstart/#train-tracking","title":"Train Tracking","text":"<pre><code>from windytracker import TrainTracker\n\n# Initialize\ntracker = TrainTracker(key=\"your_api_key\")\n\n# Get all train lines\nlines = tracker.getroutes()\n\n# Get arrivals at a station\narrivals = tracker.getarrivals(stpid=\"30001\")\n\n# Get train positions\npositions = tracker.getpositions(rt=\"Red\")\n</code></pre>"},{"location":"quickstart/#async-usage","title":"Async Usage","text":"<pre><code>import asyncio\nfrom windytracker import AsyncBusTracker\n\nasync def main():\n    async with AsyncBusTracker(key=\"your_api_key\") as tracker:\n        # Make multiple requests concurrently\n        routes_task = tracker.getroutes()\n        predictions_task = tracker.getpredictions(stpid=\"1001\")\n\n        routes, predictions = await asyncio.gather(routes_task, predictions_task)\n\n        print(\"Routes:\", routes)\n        print(\"Predictions:\", predictions)\n\nasyncio.run(main())\n</code></pre>"},{"location":"quickstart/#available-classes","title":"Available Classes","text":"Class Sync/Async Raw/Pydantic Description <code>BusTracker</code> Sync Raw JSON Basic synchronous bus tracking <code>AsyncBusTracker</code> Async Raw JSON Asynchronous bus tracking <code>TypedBusTracker</code> Sync Pydantic Sync bus tracking with data validation <code>AsyncTypedBusTracker</code> Async Pydantic Async bus tracking with data validation <code>TrainTracker</code> Sync Raw JSON Basic synchronous train tracking <code>AsyncTrainTracker</code> Async Raw JSON Asynchronous train tracking <code>TypedTrainTracker</code> Sync Pydantic Sync train tracking with data validation <code>AsyncTypedTrainTracker</code> Async Pydantic Async train tracking with data validation"},{"location":"quickstart/#error-handling","title":"Error Handling","text":"<pre><code>from windytracker import BusTracker\n\ntracker = BusTracker(key=\"your_api_key\")\n\ntry:\n    predictions = tracker.getpredictions(stpid=\"1001\")\n\n    # Check for API errors\n    if \"bustime-response\" in predictions:\n        response = predictions[\"bustime-response\"]\n        if \"error\" in response:\n            print(f\"API Error: {response['error']}\")\n        else:\n            prd = response.get(\"prd\", [])\n            print(f\"Found {len(prd)} predictions\")\n\nexcept Exception as e:\n    print(f\"Request failed: {e}\")\n</code></pre>"},{"location":"quickstart/#common-use-cases","title":"Common Use Cases","text":""},{"location":"quickstart/#find-next-bus","title":"Find Next Bus","text":"<pre><code>def next_buses(tracker, stop_id):\n    predictions = tracker.getpredictions(stpid=stop_id, top=3)\n\n    if \"bustime-response\" in predictions:\n        preds = predictions[\"bustime-response\"].get(\"prd\", [])\n        for pred in preds:\n            route = pred['rt']\n            destination = pred['des'] \n            minutes = pred.get('prdctdn', 'DUE')\n            print(f\"Route {route} to {destination}: {minutes} min\")\n\nnext_buses(tracker, \"1001\")\n</code></pre>"},{"location":"quickstart/#station-arrivals","title":"Station Arrivals","text":"<pre><code>def station_arrivals(train_tracker, station_id):\n    arrivals = train_tracker.getarrivals(stpid=station_id, max=\"5\")\n\n    if \"ctatt\" in arrivals:\n        eta_list = arrivals[\"ctatt\"].get(\"eta\", [])\n        for eta in eta_list:\n            line = eta['rt']\n            destination = eta['destNm'] \n            minutes = eta.get('min', 'Due')\n            print(f\"{line} Line to {destination}: {minutes}\")\n\ntrain_tracker = TrainTracker(key=\"your_api_key\")\nstation_arrivals(train_tracker, \"40380\")  # Clark/Lake\n</code></pre>"},{"location":"quickstart/#whats-next","title":"What's Next?","text":"<ul> <li>Bus API Reference - Detailed bus tracking methods</li> <li>Train API Reference - Detailed train tracking methods</li> </ul> <p>Legal Notice: Data provided by Chicago Transit Authority. WindyTracker is not affiliated with, endorsed by, or sponsored by CTA. Use of CTA data is subject to the CTA Developer License Agreement.</p>"},{"location":"api/bus/","title":"Bus API","text":"<p>Auto-generated API documentation for bus tracking functionality.</p> <p>WindyTracker uses data provided by CTA</p>"},{"location":"api/bus/#bustracker","title":"BusTracker","text":""},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker","title":"<code>BusTracker(key, locale='en', scheme='https', domain='ctabustracker.com')</code>","text":"<p>               Bases: <code>BaseBusTracker</code></p> <p>Synchronous class built to handle validating and returning CTA responses. Very closely resembles how the API is built.</p> <p>Example usage:</p> <p>cta = BusTracker(key='secret_key') cta.getroutes()</p> <p>Initialize the synchronous BusTracker.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>CTA API key</p> required <code>locale</code> <code>str</code> <p>language code. Defaults to \"en\".</p> <code>'en'</code> <code>scheme</code> <code>str</code> <p>'https' or 'http. Defaults to \"https\".</p> <code>'https'</code> <code>domain</code> <code>str</code> <p>Set for different domain name. Defaults to \"ctabustracker.com\".</p> <code>'ctabustracker.com'</code> <p>Raises:</p> Type Description <code>ImportError</code> <p>If requests is not installed.</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>def __init__(\n    self,\n    key,\n    locale: str = \"en\",\n    scheme: str = \"https\",\n    domain: str = \"ctabustracker.com\",\n):\n    \"\"\"Initialize the synchronous BusTracker.\n\n    Args:\n        key: CTA API key\n        locale (str, optional): language code. Defaults to \"en\".\n        scheme (str, optional): 'https' or 'http. Defaults to \"https\".\n        domain (str, optional): Set for different domain name. Defaults to \"ctabustracker.com\".\n\n    Raises:\n        ImportError: If requests is not installed.\n    \"\"\"\n    if not HAS_REQUESTS:\n        raise ImportError(\n            \"requests is required for synchronous operations. \"\n            \"Install with: pip install cta[sync] or pip install cta[all]\"\n        )\n    super().__init__(key, locale, scheme, domain)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.gettime","title":"<code>gettime(unixTime=False)</code>","text":"<p>Returns the time of the server</p> <p>Parameters:</p> Name Type Description Default <code>unixTime</code> <code>bool</code> <p>If true, returns unix time. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>def gettime(self, unixTime=False) -&gt; dict:\n    \"\"\"Returns the time of the server\n\n    Args:\n        unixTime (bool, optional): If true, returns unix time. Defaults to False.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = copy.deepcopy(self._params)\n    if unixTime:\n        params[\"unixTime\"] = unixTime\n    r = requests.get(self._format_url(ApiRoutes.TIME, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getrtpidatafeeds","title":"<code>getrtpidatafeeds()</code>","text":"<p>Get real time passenger information feeds</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>def getrtpidatafeeds(self) -&gt; dict:\n    \"\"\"Get real time passenger information feeds\n\n    Returns:\n        dict: json response\n    \"\"\"\n    r = requests.get(self._format_url(ApiRoutes.DATA_FEEDS))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getvehicles","title":"<code>getvehicles(vid=None, rt=None, tmres='s')</code>","text":"<p>Return a list of vehicles and their real-time data. Only vehicle id (vid) or route id (rt) can be passed.</p> <p>Parameters:</p> Name Type Description Default <code>vid</code> <code>str | list[str] | None</code> <p>vehicle id, can be a comma delimited string of vehicle ids or a list of vehicles ids. No more than 10 vehicle ids can be accepted. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id, can be comma delimited string of routes or a list of routes. No more than 10 routes can be accepted. Defaults to None.</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".</p> <code>'s'</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when the arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getvehicles(\n    self,\n    vid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    tmres: str = \"s\",\n) -&gt; dict:\n    \"\"\"Return a list of vehicles and their real-time data. Only vehicle id (vid) or route id (rt) can be passed.\n\n    Args:\n        vid (str | list[str] | None): vehicle id, can be a comma delimited string of vehicle ids or a list of vehicles ids. No more than 10 vehicle ids can be accepted. Defaults to None.\n        rt (str | list[str] | None): route id, can be comma delimited string of routes or a list of routes. No more than 10 routes can be accepted. Defaults to None.\n        tmres (str, optional): time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".\n\n    Raises:\n        ApiArgumentError: Error when the arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getvehicles_params(vid, rt, tmres)\n    r = requests.get(self._format_url(ApiRoutes.VEHICLES, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getroutes","title":"<code>getroutes()</code>","text":"<p>Get all available routes</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>def getroutes(self) -&gt; dict:\n    \"\"\"Get all available routes\n\n    Returns:\n        dict: json response\n    \"\"\"\n    r = requests.get(self._format_url(ApiRoutes.ROUTES))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getdirections","title":"<code>getdirections(rt)</code>","text":"<p>Returns available directional routes</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str</code> <p>Route id, only accepts one.</p> required <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getdirections(self, rt: str) -&gt; dict:\n    \"\"\"Returns available directional routes\n\n    Args:\n        rt (str): Route id, only accepts one.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getdirections_params(rt)\n    r = requests.get(self._format_url(ApiRoutes.DIRECTIONS, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getstops","title":"<code>getstops(rt=None, dir=None, stpid=None)</code>","text":"<p>Returns semi real-time stop info. Only Route id (rt) or stop id (stpid) can be passed.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>Route id, single route, required if stpid is not provided. Defaults to None.</p> <code>None</code> <code>dir</code> <code>str | None</code> <p>Route direction, required if route is provided. Defaults to None.</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id, can be comma delimited string of stops or a list of stops. No more than 10 stops can be accepted. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getstops(\n    self,\n    rt: str | None = None,\n    dir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; dict:\n    \"\"\"Returns semi real-time stop info. Only Route id (rt) or stop id (stpid) can be passed.\n\n    Args:\n        rt (str | None): Route id, single route, required if stpid is not provided. Defaults to None.\n        dir (str | None): Route direction, required if route is provided. Defaults to None.\n        stpid (str | list[str] | None): stop id, can be comma delimited string of stops or a list of stops. No more than 10 stops can be accepted. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getstops_params(rt, dir, stpid)\n    r = requests.get(self._format_url(ApiRoutes.STOPS, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getpatterns","title":"<code>getpatterns(pid=None, rt=None)</code>","text":"<p>Return a set of points that create a pattern</p> <p>Parameters:</p> Name Type Description Default <code>pid</code> <code>str | list[str] | None</code> <p>pattern id, required if route (rt) parameter is not provided. Can be comma delimitated string of patterns, or list of patterns. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id, required if patterns (pid) are not provided, only accepts one. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>description</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getpatterns(\n    self, pid: str | list[str] | None = None, rt: str | list[str] | None = None\n) -&gt; dict:\n    \"\"\"Return a set of points that create a pattern\n\n    Args:\n        pid (str | list[str] | None): pattern id, required if route (rt) parameter is not provided. Can be comma delimitated string of patterns, or list of patterns. Defaults to None.\n        rt (str | list[str] | None): route id, required if patterns (pid) are not provided, only accepts one. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    params = self._validate_getpatterns_params(pid, rt)\n    r = requests.get(self._format_url(ApiRoutes.PATTERNS, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getpredictions","title":"<code>getpredictions(stpid=None, rt=None, vid=None, top=None, tmres='s')</code>","text":"<p>Get real-time predictions for a list of stops.</p> <p>Parameters:</p> Name Type Description Default <code>stpid</code> <code>str | list[str] | None</code> <p>stop id, can be a string of comma delimited stops, or a list of routes. Required if vehicle id (vid) is not provided. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>Optional route id can be provided with stops. can be a string of comma delimited stops, or a list of stops. Defaults to None.</p> <code>None</code> <code>vid</code> <code>str | list[str] | None</code> <p>Vehicle id, can be a string of comma delimited vehicles or a list of vehicles. Required if stop id (stpid) is not provided. Defaults to None.</p> <code>None</code> <code>top</code> <code>int | None</code> <p>Maximum number of predictions to be returned. Defaults to None.</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".</p> <code>'s'</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getpredictions(\n    self,\n    stpid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    vid: str | list[str] | None = None,\n    top: int | None = None,\n    tmres: str = \"s\",\n) -&gt; dict:\n    \"\"\"Get real-time predictions for a list of stops.\n\n    Args:\n        stpid (str | list[str] | None, optional): stop id, can be a string of comma delimited stops, or a list of routes. Required if vehicle id (vid) is not provided. Defaults to None.\n        rt (str | list[str] | None, optional): Optional route id can be provided with stops. can be a string of comma delimited stops, or a list of stops. Defaults to None.\n        vid (str | list[str] | None, optional): Vehicle id, can be a string of comma delimited vehicles or a list of vehicles. Required if stop id (stpid) is not provided. Defaults to None.\n        top (int | None, optional): Maximum number of predictions to be returned. Defaults to None.\n        tmres (str, optional): time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getpredictions_params(stpid, rt, vid, top, tmres)\n    r = requests.get(self._format_url(ApiRoutes.PREDICTIONS, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getservicebulletins","title":"<code>getservicebulletins(rt=None, rtdir=None, stpid=None)</code>","text":"<p>Get information about services for a given route or stop.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str] | None</code> <p>route id, can be a comma delimited list of routes or a list of routes, required if stop id (stpid) are not provided. If combed with rmdir, only one route can be specified. Defaults to None.</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional single route direction. Defaults to None.</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id, can be a comma delimited list of stops or a list of stops, required if routes (rt) are not provided. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Errors when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getservicebulletins(\n    self,\n    rt: str | list[str] | None = None,\n    rtdir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; dict:\n    \"\"\"Get information about services for a given route or stop.\n\n    Args:\n        rt (str | list[str] | None, optional): route id, can be a comma delimited list of routes or a list of routes, required if stop id (stpid) are not provided. If combed with rmdir, only one route can be specified. Defaults to None.\n        rtdir (str | None, optional): Optional single route direction. Defaults to None.\n        stpid (str | list[str] | None, optional): stop id, can be a comma delimited list of stops or a list of stops, required if routes (rt) are not provided. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Errors when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getservicebulletins_params(rt, rtdir, stpid)\n    r = requests.get(self._format_url(ApiRoutes.BULLETINS, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getlocalelist","title":"<code>getlocalelist(inlocalLanguge=False)</code>","text":"<p>Get locales list</p> <p>Parameters:</p> Name Type Description Default <code>inlocalLanguge</code> <code>bool</code> <p>Display names in the native language of the locale when true. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getlocalelist(self, inlocalLanguge: bool = False) -&gt; dict:\n    \"\"\"Get locales list\n\n    Args:\n        inlocalLanguge (bool): Display names in the native language of the locale when true. Defaults to False.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = copy.deepcopy(self._params)\n    if inlocalLanguge:\n        params[\"inLocaleLanguage\"] = inlocalLanguge\n    r = requests.get(self._format_url(ApiRoutes.LOCALES, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.BusTracker.getdetours","title":"<code>getdetours(rt=None, rtdir=None, rtpidatafeed=None)</code>","text":"<p>Get route detours.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>route id, single route only. Defaults to None.</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional route direction. Defaults to None.</p> <code>None</code> <code>rtpidatafeed</code> <code>str | None</code> <p>Real-Time Passenger Information data feed name (multi-feed only). Required in multi-feed systems if rt parameter is provided. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Errors when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\ndef getdetours(\n    self,\n    rt: str | None = None,\n    rtdir: str | None = None,\n    rtpidatafeed: str | None = None,\n) -&gt; dict:\n    \"\"\"Get route detours.\n\n    Args:\n        rt (str | None): route id, single route only. Defaults to None.\n        rtdir (str | None, optional): Optional route direction. Defaults to None.\n        rtpidatafeed (str | None, optional): Real-Time Passenger Information data feed name (multi-feed only). Required in multi-feed systems if rt parameter is provided. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Errors when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getdetours_params(rt, rtdir, rtpidatafeed)\n    r = requests.get(self._format_url(ApiRoutes.DETOURS, params))\n    return r.json()\n</code></pre>"},{"location":"api/bus/#asyncbustracker","title":"AsyncBusTracker","text":""},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker","title":"<code>AsyncBusTracker(key, locale='en', scheme='https', domain='ctabustracker.com')</code>","text":"<p>               Bases: <code>BaseBusTracker</code></p> <p>Asynchronous class built to handle validating and returning CTA responses. Very closely resembles how the API is built.</p> <p>Example usage:</p> <p>async with AsyncBusTracker(key='secret_key') as cta: ...     routes = await cta.getroutes()</p> <p>Initialize the asynchronous AsyncBusTracker.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>CTA API key</p> required <code>locale</code> <code>str</code> <p>language code. Defaults to \"en\".</p> <code>'en'</code> <code>scheme</code> <code>str</code> <p>'https' or 'http. Defaults to \"https\".</p> <code>'https'</code> <code>domain</code> <code>str</code> <p>Set for different domain name. Defaults to \"ctabustracker.com\".</p> <code>'ctabustracker.com'</code> <p>Raises:</p> Type Description <code>ImportError</code> <p>If aiohttp is not installed.</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>def __init__(\n    self,\n    key,\n    locale: str = \"en\",\n    scheme: str = \"https\",\n    domain: str = \"ctabustracker.com\",\n):\n    \"\"\"Initialize the asynchronous AsyncBusTracker.\n\n    Args:\n        key: CTA API key\n        locale (str, optional): language code. Defaults to \"en\".\n        scheme (str, optional): 'https' or 'http. Defaults to \"https\".\n        domain (str, optional): Set for different domain name. Defaults to \"ctabustracker.com\".\n\n    Raises:\n        ImportError: If aiohttp is not installed.\n    \"\"\"\n    if not HAS_AIOHTTP:\n        raise ImportError(\n            \"aiohttp is required for asynchronous operations. \"\n            \"Install with: pip install cta[async] or pip install cta[all]\"\n        )\n    super().__init__(key, locale, scheme, domain)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Async context manager entry.</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>async def __aenter__(self):\n    \"\"\"Async context manager entry.\"\"\"\n    if not HAS_AIOHTTP:\n        raise ImportError(\n            \"aiohttp is required for asynchronous operations. \"\n            \"Install with: pip install cta[async] or pip install cta[all]\"\n        )\n    self._session = aiohttp.ClientSession()\n    return self\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Async context manager exit.</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>async def __aexit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Async context manager exit.\"\"\"\n    if hasattr(self, \"_session\"):\n        await self._session.close()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.gettime","title":"<code>gettime(unixTime=False)</code>  <code>async</code>","text":"<p>Returns the time of the server</p> <p>Parameters:</p> Name Type Description Default <code>unixTime</code> <code>bool</code> <p>If true, returns unix time. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>async def gettime(self, unixTime=False) -&gt; dict:\n    \"\"\"Returns the time of the server\n\n    Args:\n        unixTime (bool, optional): If true, returns unix time. Defaults to False.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = copy.deepcopy(self._params)\n    if unixTime:\n        params[\"unixTime\"] = unixTime\n\n    async with self._session.get(self._format_url(ApiRoutes.TIME, params)) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getrtpidatafeeds","title":"<code>getrtpidatafeeds()</code>  <code>async</code>","text":"<p>Get real time passenger information feeds</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>async def getrtpidatafeeds(self) -&gt; dict:\n    \"\"\"Get real time passenger information feeds\n\n    Returns:\n        dict: json response\n    \"\"\"\n    async with self._session.get(self._format_url(ApiRoutes.DATA_FEEDS)) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getvehicles","title":"<code>getvehicles(vid=None, rt=None, tmres='s')</code>  <code>async</code>","text":"<p>Return a list of vehicles and their real-time data. Only vehicle id (vid) or route id (rt) can be passed.</p> <p>Parameters:</p> Name Type Description Default <code>vid</code> <code>str | list[str] | None</code> <p>vehicle id, can be a comma delimited string of vehicle ids or a list of vehicles ids. No more than 10 vehicle ids can be accepted. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id, can be comma delimited string of routes or a list of routes. No more than 10 routes can be accepted. Defaults to None.</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".</p> <code>'s'</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when the arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getvehicles(\n    self,\n    vid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    tmres: str = \"s\",\n) -&gt; dict:\n    \"\"\"Return a list of vehicles and their real-time data. Only vehicle id (vid) or route id (rt) can be passed.\n\n    Args:\n        vid (str | list[str] | None): vehicle id, can be a comma delimited string of vehicle ids or a list of vehicles ids. No more than 10 vehicle ids can be accepted. Defaults to None.\n        rt (str | list[str] | None): route id, can be comma delimited string of routes or a list of routes. No more than 10 routes can be accepted. Defaults to None.\n        tmres (str, optional): time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".\n\n    Raises:\n        ApiArgumentError: Error when the arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getvehicles_params(vid, rt, tmres)\n    async with self._session.get(\n        self._format_url(ApiRoutes.VEHICLES, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getroutes","title":"<code>getroutes()</code>  <code>async</code>","text":"<p>Get all available routes</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>async def getroutes(self) -&gt; dict:\n    \"\"\"Get all available routes\n\n    Returns:\n        dict: json response\n    \"\"\"\n    async with self._session.get(self._format_url(ApiRoutes.ROUTES)) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getdirections","title":"<code>getdirections(rt)</code>  <code>async</code>","text":"<p>Returns available directional routes</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str</code> <p>Route id, only accepts one.</p> required <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getdirections(self, rt: str) -&gt; dict:\n    \"\"\"Returns available directional routes\n\n    Args:\n        rt (str): Route id, only accepts one.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getdirections_params(rt)\n    async with self._session.get(\n        self._format_url(ApiRoutes.DIRECTIONS, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getstops","title":"<code>getstops(rt=None, dir=None, stpid=None)</code>  <code>async</code>","text":"<p>Returns semi real-time stop info. Only Route id (rt) or stop id (stpid) can be passed.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>Route id, single route, required if stpid is not provided. Defaults to None.</p> <code>None</code> <code>dir</code> <code>str | None</code> <p>Route direction, required if route is provided. Defaults to None.</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id, can be comma delimited string of stops or a list of stops. No more than 10 stops can be accepted. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getstops(\n    self,\n    rt: str | None = None,\n    dir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; dict:\n    \"\"\"Returns semi real-time stop info. Only Route id (rt) or stop id (stpid) can be passed.\n\n    Args:\n        rt (str | None): Route id, single route, required if stpid is not provided. Defaults to None.\n        dir (str | None): Route direction, required if route is provided. Defaults to None.\n        stpid (str | list[str] | None): stop id, can be comma delimited string of stops or a list of stops. No more than 10 stops can be accepted. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getstops_params(rt, dir, stpid)\n    async with self._session.get(self._format_url(ApiRoutes.STOPS, params)) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getpatterns","title":"<code>getpatterns(pid=None, rt=None)</code>  <code>async</code>","text":"<p>Return a set of points that create a pattern</p> <p>Parameters:</p> Name Type Description Default <code>pid</code> <code>str | list[str] | None</code> <p>pattern id, required if route (rt) parameter is not provided. Can be comma delimitated string of patterns, or list of patterns. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id, required if patterns (pid) are not provided, only accepts one. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>description</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getpatterns(\n    self, pid: str | list[str] | None = None, rt: str | list[str] | None = None\n) -&gt; dict:\n    \"\"\"Return a set of points that create a pattern\n\n    Args:\n        pid (str | list[str] | None): pattern id, required if route (rt) parameter is not provided. Can be comma delimitated string of patterns, or list of patterns. Defaults to None.\n        rt (str | list[str] | None): route id, required if patterns (pid) are not provided, only accepts one. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    params = self._validate_getpatterns_params(pid, rt)\n    async with self._session.get(\n        self._format_url(ApiRoutes.PATTERNS, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getpredictions","title":"<code>getpredictions(stpid=None, rt=None, vid=None, top=None, tmres='s')</code>  <code>async</code>","text":"<p>Get real-time predictions for a list of stops.</p> <p>Parameters:</p> Name Type Description Default <code>stpid</code> <code>str | list[str] | None</code> <p>stop id, can be a string of comma delimited stops, or a list of routes. Required if vehicle id (vid) is not provided. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>Optional route id can be provided with stops. can be a string of comma delimited stops, or a list of stops. Defaults to None.</p> <code>None</code> <code>vid</code> <code>str | list[str] | None</code> <p>Vehicle id, can be a string of comma delimited vehicles or a list of vehicles. Required if stop id (stpid) is not provided. Defaults to None.</p> <code>None</code> <code>top</code> <code>int | None</code> <p>Maximum number of predictions to be returned. Defaults to None.</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".</p> <code>'s'</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getpredictions(\n    self,\n    stpid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    vid: str | list[str] | None = None,\n    top: int | None = None,\n    tmres: str = \"s\",\n) -&gt; dict:\n    \"\"\"Get real-time predictions for a list of stops.\n\n    Args:\n        stpid (str | list[str] | None, optional): stop id, can be a string of comma delimited stops, or a list of routes. Required if vehicle id (vid) is not provided. Defaults to None.\n        rt (str | list[str] | None, optional): Optional route id can be provided with stops. can be a string of comma delimited stops, or a list of stops. Defaults to None.\n        vid (str | list[str] | None, optional): Vehicle id, can be a string of comma delimited vehicles or a list of vehicles. Required if stop id (stpid) is not provided. Defaults to None.\n        top (int | None, optional): Maximum number of predictions to be returned. Defaults to None.\n        tmres (str, optional): time resolution, 's' for seconds, 'm' for minutes. Defaults to \"s\".\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getpredictions_params(stpid, rt, vid, top, tmres)\n    async with self._session.get(\n        self._format_url(ApiRoutes.PREDICTIONS, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getservicebulletins","title":"<code>getservicebulletins(rt=None, rtdir=None, stpid=None)</code>  <code>async</code>","text":"<p>Get information about services for a given route or stop.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str] | None</code> <p>route id, can be a comma delimited list of routes or a list of routes, required if stop id (stpid) are not provided. If combed with rmdir, only one route can be specified. Defaults to None.</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional single route direction. Defaults to None.</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id, can be a comma delimited list of stops or a list of stops, required if routes (rt) are not provided. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Errors when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getservicebulletins(\n    self,\n    rt: str | list[str] | None = None,\n    rtdir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; dict:\n    \"\"\"Get information about services for a given route or stop.\n\n    Args:\n        rt (str | list[str] | None, optional): route id, can be a comma delimited list of routes or a list of routes, required if stop id (stpid) are not provided. If combed with rmdir, only one route can be specified. Defaults to None.\n        rtdir (str | None, optional): Optional single route direction. Defaults to None.\n        stpid (str | list[str] | None, optional): stop id, can be a comma delimited list of stops or a list of stops, required if routes (rt) are not provided. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Errors when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getservicebulletins_params(rt, rtdir, stpid)\n    async with self._session.get(\n        self._format_url(ApiRoutes.BULLETINS, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getlocalelist","title":"<code>getlocalelist(inlocalLanguge=False)</code>  <code>async</code>","text":"<p>Get locales list</p> <p>Parameters:</p> Name Type Description Default <code>inlocalLanguge</code> <code>bool</code> <p>Display names in the native language of the locale when true. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getlocalelist(self, inlocalLanguge: bool = False) -&gt; dict:\n    \"\"\"Get locales list\n\n    Args:\n        inlocalLanguge (bool): Display names in the native language of the locale when true. Defaults to False.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = copy.deepcopy(self._params)\n    if inlocalLanguge:\n        params[\"inLocaleLanguage\"] = inlocalLanguge\n    async with self._session.get(\n        self._format_url(ApiRoutes.LOCALES, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.bustracker.AsyncBusTracker.getdetours","title":"<code>getdetours(rt=None, rtdir=None, rtpidatafeed=None)</code>  <code>async</code>","text":"<p>Get route detours.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>route id, single route only. Defaults to None.</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional route direction. Defaults to None.</p> <code>None</code> <code>rtpidatafeed</code> <code>str | None</code> <p>Real-Time Passenger Information data feed name (multi-feed only). Required in multi-feed systems if rt parameter is provided. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Errors when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>@validate_arguments\nasync def getdetours(\n    self,\n    rt: str | None = None,\n    rtdir: str | None = None,\n    rtpidatafeed: str | None = None,\n) -&gt; dict:\n    \"\"\"Get route detours.\n\n    Args:\n        rt (str | None): route id, single route only. Defaults to None.\n        rtdir (str | None, optional): Optional route direction. Defaults to None.\n        rtpidatafeed (str | None, optional): Real-Time Passenger Information data feed name (multi-feed only). Required in multi-feed systems if rt parameter is provided. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Errors when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_getdetours_params(rt, rtdir, rtpidatafeed)\n    async with self._session.get(\n        self._format_url(ApiRoutes.DETOURS, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/bus/#typedbustracker","title":"TypedBusTracker","text":""},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker","title":"<code>TypedBusTracker(key, locale='en', scheme='https', domain='ctabustracker.com')</code>","text":"<p>               Bases: <code>BaseTypedBusTracker</code>, <code>BusTracker</code></p> <p>Synchronous typed version of BusTracker that returns Pydantic models instead of raw dicts.</p> <p>Example usage:</p> <p>tracker = TypedBusTracker(key='secret_key') routes = tracker.getroutes() print(routes.routes[0].rtnm)  # Autocomplete works!</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>def __init__(\n    self,\n    key,\n    locale: str = \"en\",\n    scheme: str = \"https\",\n    domain: str = \"ctabustracker.com\",\n):\n    \"\"\"Initialize the synchronous BusTracker.\n\n    Args:\n        key: CTA API key\n        locale (str, optional): language code. Defaults to \"en\".\n        scheme (str, optional): 'https' or 'http. Defaults to \"https\".\n        domain (str, optional): Set for different domain name. Defaults to \"ctabustracker.com\".\n\n    Raises:\n        ImportError: If requests is not installed.\n    \"\"\"\n    if not HAS_REQUESTS:\n        raise ImportError(\n            \"requests is required for synchronous operations. \"\n            \"Install with: pip install cta[sync] or pip install cta[all]\"\n        )\n    super().__init__(key, locale, scheme, domain)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.gettime","title":"<code>gettime(unixTime=False)</code>","text":"<p>Returns the time of the server as a typed response</p> <p>Parameters:</p> Name Type Description Default <code>unixTime</code> <code>bool</code> <p>If true, returns unix time</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[TimeResponse, ErrorResponse]</code> <p>TimeResponse with server time or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def gettime(self, unixTime: bool = False) -&gt; Union[TimeResponse, ErrorResponse]:\n    \"\"\"Returns the time of the server as a typed response\n\n    Args:\n        unixTime: If true, returns unix time\n\n    Returns:\n        TimeResponse with server time or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.gettime(self, unixTime)\n    return self._parse_response(response, TimeResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getrtpidatafeeds","title":"<code>getrtpidatafeeds()</code>","text":"<p>Get real time passenger information feeds as typed response</p> <p>Returns:</p> Type Description <code>Union[RtpiDataFeedsResponse, ErrorResponse]</code> <p>RtpiDataFeedsResponse with list of data feeds or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getrtpidatafeeds(self) -&gt; Union[RtpiDataFeedsResponse, ErrorResponse]:\n    \"\"\"Get real time passenger information feeds as typed response\n\n    Returns:\n        RtpiDataFeedsResponse with list of data feeds or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getrtpidatafeeds(self)\n    return self._parse_response(response, RtpiDataFeedsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getroutes","title":"<code>getroutes()</code>","text":"<p>Get all available routes as typed response</p> <p>Returns:</p> Type Description <code>Union[RoutesResponse, ErrorResponse]</code> <p>RoutesResponse with list of routes or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getroutes(self) -&gt; Union[RoutesResponse, ErrorResponse]:\n    \"\"\"Get all available routes as typed response\n\n    Returns:\n        RoutesResponse with list of routes or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getroutes(self)\n    return self._parse_response(response, RoutesResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getdirections","title":"<code>getdirections(rt)</code>","text":"<p>Returns available directional routes as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str</code> <p>Route id, only accepts one</p> required <p>Returns:</p> Type Description <code>Union[DirectionsResponse, ErrorResponse]</code> <p>DirectionsResponse with available directions or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getdirections(self, rt: str) -&gt; Union[DirectionsResponse, ErrorResponse]:\n    \"\"\"Returns available directional routes as typed response\n\n    Args:\n        rt: Route id, only accepts one\n\n    Returns:\n        DirectionsResponse with available directions or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getdirections(self, rt)\n    return self._parse_response(response, DirectionsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getvehicles","title":"<code>getvehicles(vid=None, rt=None, tmres='s')</code>","text":"<p>Return vehicles and their real-time data as typed response</p> <p>Parameters:</p> Name Type Description Default <code>vid</code> <code>str | list[str] | None</code> <p>vehicle id(s), max 10</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id(s), max 10</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution, 's' for seconds, 'm' for minutes</p> <code>'s'</code> <p>Returns:</p> Type Description <code>Union[VehiclesResponse, ErrorResponse]</code> <p>VehiclesResponse with vehicle data or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getvehicles(\n    self,\n    vid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    tmres: str = \"s\",\n) -&gt; Union[VehiclesResponse, ErrorResponse]:\n    \"\"\"Return vehicles and their real-time data as typed response\n\n    Args:\n        vid: vehicle id(s), max 10\n        rt: route id(s), max 10\n        tmres: time resolution, 's' for seconds, 'm' for minutes\n\n    Returns:\n        VehiclesResponse with vehicle data or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getvehicles(self, vid, rt, tmres)\n    return self._parse_response(response, VehiclesResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getstops","title":"<code>getstops(rt=None, dir=None, stpid=None)</code>","text":"<p>Returns stop information as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>Route id, single route</p> <code>None</code> <code>dir</code> <code>str | None</code> <p>Route direction</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id(s), max 10</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[StopsResponse, ErrorResponse]</code> <p>StopsResponse with stop data or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getstops(\n    self,\n    rt: str | None = None,\n    dir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; Union[StopsResponse, ErrorResponse]:\n    \"\"\"Returns stop information as typed response\n\n    Args:\n        rt: Route id, single route\n        dir: Route direction\n        stpid: stop id(s), max 10\n\n    Returns:\n        StopsResponse with stop data or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getstops(self, rt, dir, stpid)\n    return self._parse_response(response, StopsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getpredictions","title":"<code>getpredictions(stpid=None, rt=None, vid=None, top=None, tmres='s')</code>","text":"<p>Get real-time predictions as typed response</p> <p>Parameters:</p> Name Type Description Default <code>stpid</code> <code>str | list[str] | None</code> <p>stop id(s), max 10</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>Optional route id(s)</p> <code>None</code> <code>vid</code> <code>str | list[str] | None</code> <p>vehicle id(s), max 10</p> <code>None</code> <code>top</code> <code>int | None</code> <p>Maximum predictions to return</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution</p> <code>'s'</code> <p>Returns:</p> Type Description <code>Union[PredictionsResponse, ErrorResponse]</code> <p>PredictionsResponse with predictions or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getpredictions(\n    self,\n    stpid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    vid: str | list[str] | None = None,\n    top: int | None = None,\n    tmres: str = \"s\",\n) -&gt; Union[PredictionsResponse, ErrorResponse]:\n    \"\"\"Get real-time predictions as typed response\n\n    Args:\n        stpid: stop id(s), max 10\n        rt: Optional route id(s)\n        vid: vehicle id(s), max 10\n        top: Maximum predictions to return\n        tmres: time resolution\n\n    Returns:\n        PredictionsResponse with predictions or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getpredictions(self, stpid, rt, vid, top, tmres)\n    return self._parse_response(response, PredictionsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getpatterns","title":"<code>getpatterns(pid=None, rt=None)</code>","text":"<p>Return route patterns as typed response</p> <p>Parameters:</p> Name Type Description Default <code>pid</code> <code>str | list[str] | None</code> <p>pattern id(s), max 10</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id(s), max 10</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[PatternsResponse, ErrorResponse]</code> <p>PatternsResponse with pattern data or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getpatterns(\n    self, pid: str | list[str] | None = None, rt: str | list[str] | None = None\n) -&gt; Union[PatternsResponse, ErrorResponse]:\n    \"\"\"Return route patterns as typed response\n\n    Args:\n        pid: pattern id(s), max 10\n        rt: route id(s), max 10\n\n    Returns:\n        PatternsResponse with pattern data or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getpatterns(self, pid, rt)\n    return self._parse_response(response, PatternsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getservicebulletins","title":"<code>getservicebulletins(rt=None, rtdir=None, stpid=None)</code>","text":"<p>Get service bulletins as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str] | None</code> <p>route id(s), max 10</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional route direction</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id(s), max 10</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ServiceBulletinsResponse, ErrorResponse]</code> <p>ServiceBulletinsResponse with bulletins or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getservicebulletins(\n    self,\n    rt: str | list[str] | None = None,\n    rtdir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; Union[ServiceBulletinsResponse, ErrorResponse]:\n    \"\"\"Get service bulletins as typed response\n\n    Args:\n        rt: route id(s), max 10\n        rtdir: Optional route direction\n        stpid: stop id(s), max 10\n\n    Returns:\n        ServiceBulletinsResponse with bulletins or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getservicebulletins(self, rt, rtdir, stpid)\n    return self._parse_response(response, ServiceBulletinsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getagencies","title":"<code>getagencies()</code>","text":"<p>Get agencies as typed response</p> <p>Returns:</p> Type Description <code>Union[AgenciesResponse, ErrorResponse]</code> <p>AgenciesResponse with agency details or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getagencies(self) -&gt; Union[AgenciesResponse, ErrorResponse]:\n    \"\"\"Get agencies as typed response\n\n    Returns:\n        AgenciesResponse with agency details or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getagencies(self)\n    return self._parse_response(response, AgenciesResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getdetours","title":"<code>getdetours(rt=None, rtdir=None, rtpidatafeed=None)</code>","text":"<p>Get detours as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>Optional route designator (ex. '20' or 'X20')</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional route direction (requires rt parameter)</p> <code>None</code> <code>rtpidatafeed</code> <code>str | None</code> <p>Optional Real-Time Passenger Information data feed name (multi-feed only)</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[DetoursResponse, ErrorResponse]</code> <p>DetoursResponse with detour details or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getdetours(\n    self,\n    rt: str | None = None,\n    rtdir: str | None = None,\n    rtpidatafeed: str | None = None,\n) -&gt; Union[DetoursResponse, ErrorResponse]:\n    \"\"\"Get detours as typed response\n\n    Args:\n        rt: Optional route designator (ex. '20' or 'X20')\n        rtdir: Optional route direction (requires rt parameter)\n        rtpidatafeed: Optional Real-Time Passenger Information data feed name (multi-feed only)\n\n    Returns:\n        DetoursResponse with detour details or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getdetours(self, rt, rtdir, rtpidatafeed)\n    return self._parse_response(response, DetoursResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.TypedBusTracker.getlocalelist","title":"<code>getlocalelist(inlocalLanguge=False)</code>","text":"<p>Get locales list as typed response</p> <p>Parameters:</p> Name Type Description Default <code>inlocalLanguge</code> <code>bool</code> <p>Display names in the native language of the locale when true</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[LocalesResponse, ErrorResponse]</code> <p>LocalesResponse with available locales or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>def getlocalelist(\n    self, inlocalLanguge: bool = False\n) -&gt; Union[LocalesResponse, ErrorResponse]:\n    \"\"\"Get locales list as typed response\n\n    Args:\n        inlocalLanguge: Display names in the native language of the locale when true\n\n    Returns:\n        LocalesResponse with available locales or ErrorResponse if error\n    \"\"\"\n    response = BusTracker.getlocalelist(self, inlocalLanguge)\n    return self._parse_response(response, LocalesResponse)\n</code></pre>"},{"location":"api/bus/#asynctypedbustracker","title":"AsyncTypedBusTracker","text":""},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker","title":"<code>AsyncTypedBusTracker(key, locale='en', scheme='https', domain='ctabustracker.com')</code>","text":"<p>               Bases: <code>BaseTypedBusTracker</code>, <code>AsyncBusTracker</code></p> <p>Asynchronous typed version of AsyncBusTracker that returns Pydantic models instead of raw dicts.</p> <p>Example usage:</p> <p>async with AsyncTypedBusTracker(key='secret_key') as tracker: ...     routes = await tracker.getroutes() ...     print(routes.routes[0].rtnm)  # Autocomplete works!</p> Source code in <code>src/windytracker/bus/bustracker.py</code> <pre><code>def __init__(\n    self,\n    key,\n    locale: str = \"en\",\n    scheme: str = \"https\",\n    domain: str = \"ctabustracker.com\",\n):\n    \"\"\"Initialize the asynchronous AsyncBusTracker.\n\n    Args:\n        key: CTA API key\n        locale (str, optional): language code. Defaults to \"en\".\n        scheme (str, optional): 'https' or 'http. Defaults to \"https\".\n        domain (str, optional): Set for different domain name. Defaults to \"ctabustracker.com\".\n\n    Raises:\n        ImportError: If aiohttp is not installed.\n    \"\"\"\n    if not HAS_AIOHTTP:\n        raise ImportError(\n            \"aiohttp is required for asynchronous operations. \"\n            \"Install with: pip install cta[async] or pip install cta[all]\"\n        )\n    super().__init__(key, locale, scheme, domain)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.gettime","title":"<code>gettime(unixTime=False)</code>  <code>async</code>","text":"<p>Returns the time of the server as a typed response</p> <p>Parameters:</p> Name Type Description Default <code>unixTime</code> <code>bool</code> <p>If true, returns unix time</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[TimeResponse, ErrorResponse]</code> <p>TimeResponse with server time or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def gettime(\n    self, unixTime: bool = False\n) -&gt; Union[TimeResponse, ErrorResponse]:\n    \"\"\"Returns the time of the server as a typed response\n\n    Args:\n        unixTime: If true, returns unix time\n\n    Returns:\n        TimeResponse with server time or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.gettime(self, unixTime)\n    return self._parse_response(response, TimeResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getrtpidatafeeds","title":"<code>getrtpidatafeeds()</code>  <code>async</code>","text":"<p>Get real time passenger information feeds as typed response</p> <p>Returns:</p> Type Description <code>Union[RtpiDataFeedsResponse, ErrorResponse]</code> <p>RtpiDataFeedsResponse with list of data feeds or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getrtpidatafeeds(self) -&gt; Union[RtpiDataFeedsResponse, ErrorResponse]:\n    \"\"\"Get real time passenger information feeds as typed response\n\n    Returns:\n        RtpiDataFeedsResponse with list of data feeds or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getrtpidatafeeds(self)\n    return self._parse_response(response, RtpiDataFeedsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getroutes","title":"<code>getroutes()</code>  <code>async</code>","text":"<p>Get all available routes as typed response</p> <p>Returns:</p> Type Description <code>Union[RoutesResponse, ErrorResponse]</code> <p>RoutesResponse with list of routes or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getroutes(self) -&gt; Union[RoutesResponse, ErrorResponse]:\n    \"\"\"Get all available routes as typed response\n\n    Returns:\n        RoutesResponse with list of routes or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getroutes(self)\n    return self._parse_response(response, RoutesResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getdirections","title":"<code>getdirections(rt)</code>  <code>async</code>","text":"<p>Returns available directional routes as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str</code> <p>Route id, only accepts one</p> required <p>Returns:</p> Type Description <code>Union[DirectionsResponse, ErrorResponse]</code> <p>DirectionsResponse with available directions or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getdirections(self, rt: str) -&gt; Union[DirectionsResponse, ErrorResponse]:\n    \"\"\"Returns available directional routes as typed response\n\n    Args:\n        rt: Route id, only accepts one\n\n    Returns:\n        DirectionsResponse with available directions or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getdirections(self, rt)\n    return self._parse_response(response, DirectionsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getvehicles","title":"<code>getvehicles(vid=None, rt=None, tmres='s')</code>  <code>async</code>","text":"<p>Return vehicles and their real-time data as typed response</p> <p>Parameters:</p> Name Type Description Default <code>vid</code> <code>str | list[str] | None</code> <p>vehicle id(s), max 10</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id(s), max 10</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution, 's' for seconds, 'm' for minutes</p> <code>'s'</code> <p>Returns:</p> Type Description <code>Union[VehiclesResponse, ErrorResponse]</code> <p>VehiclesResponse with vehicle data or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getvehicles(\n    self,\n    vid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    tmres: str = \"s\",\n) -&gt; Union[VehiclesResponse, ErrorResponse]:\n    \"\"\"Return vehicles and their real-time data as typed response\n\n    Args:\n        vid: vehicle id(s), max 10\n        rt: route id(s), max 10\n        tmres: time resolution, 's' for seconds, 'm' for minutes\n\n    Returns:\n        VehiclesResponse with vehicle data or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getvehicles(self, vid, rt, tmres)\n    return self._parse_response(response, VehiclesResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getstops","title":"<code>getstops(rt=None, dir=None, stpid=None)</code>  <code>async</code>","text":"<p>Returns stop information as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>Route id, single route</p> <code>None</code> <code>dir</code> <code>str | None</code> <p>Route direction</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id(s), max 10</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[StopsResponse, ErrorResponse]</code> <p>StopsResponse with stop data or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getstops(\n    self,\n    rt: str | None = None,\n    dir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; Union[StopsResponse, ErrorResponse]:\n    \"\"\"Returns stop information as typed response\n\n    Args:\n        rt: Route id, single route\n        dir: Route direction\n        stpid: stop id(s), max 10\n\n    Returns:\n        StopsResponse with stop data or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getstops(self, rt, dir, stpid)\n    return self._parse_response(response, StopsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getpredictions","title":"<code>getpredictions(stpid=None, rt=None, vid=None, top=None, tmres='s')</code>  <code>async</code>","text":"<p>Get real-time predictions as typed response</p> <p>Parameters:</p> Name Type Description Default <code>stpid</code> <code>str | list[str] | None</code> <p>stop id(s), max 10</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>Optional route id(s)</p> <code>None</code> <code>vid</code> <code>str | list[str] | None</code> <p>vehicle id(s), max 10</p> <code>None</code> <code>top</code> <code>int | None</code> <p>Maximum predictions to return</p> <code>None</code> <code>tmres</code> <code>str</code> <p>time resolution</p> <code>'s'</code> <p>Returns:</p> Type Description <code>Union[PredictionsResponse, ErrorResponse]</code> <p>PredictionsResponse with predictions or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getpredictions(\n    self,\n    stpid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    vid: str | list[str] | None = None,\n    top: int | None = None,\n    tmres: str = \"s\",\n) -&gt; Union[PredictionsResponse, ErrorResponse]:\n    \"\"\"Get real-time predictions as typed response\n\n    Args:\n        stpid: stop id(s), max 10\n        rt: Optional route id(s)\n        vid: vehicle id(s), max 10\n        top: Maximum predictions to return\n        tmres: time resolution\n\n    Returns:\n        PredictionsResponse with predictions or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getpredictions(\n        self, stpid, rt, vid, top, tmres\n    )\n    return self._parse_response(response, PredictionsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getpatterns","title":"<code>getpatterns(pid=None, rt=None)</code>  <code>async</code>","text":"<p>Return route patterns as typed response</p> <p>Parameters:</p> Name Type Description Default <code>pid</code> <code>str | list[str] | None</code> <p>pattern id(s), max 10</p> <code>None</code> <code>rt</code> <code>str | list[str] | None</code> <p>route id(s), max 10</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[PatternsResponse, ErrorResponse]</code> <p>PatternsResponse with pattern data or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getpatterns(\n    self, pid: str | list[str] | None = None, rt: str | list[str] | None = None\n) -&gt; Union[PatternsResponse, ErrorResponse]:\n    \"\"\"Return route patterns as typed response\n\n    Args:\n        pid: pattern id(s), max 10\n        rt: route id(s), max 10\n\n    Returns:\n        PatternsResponse with pattern data or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getpatterns(self, pid, rt)\n    return self._parse_response(response, PatternsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getservicebulletins","title":"<code>getservicebulletins(rt=None, rtdir=None, stpid=None)</code>  <code>async</code>","text":"<p>Get service bulletins as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str] | None</code> <p>route id(s), max 10</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional route direction</p> <code>None</code> <code>stpid</code> <code>str | list[str] | None</code> <p>stop id(s), max 10</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ServiceBulletinsResponse, ErrorResponse]</code> <p>ServiceBulletinsResponse with bulletins or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getservicebulletins(\n    self,\n    rt: str | list[str] | None = None,\n    rtdir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; Union[ServiceBulletinsResponse, ErrorResponse]:\n    \"\"\"Get service bulletins as typed response\n\n    Args:\n        rt: route id(s), max 10\n        rtdir: Optional route direction\n        stpid: stop id(s), max 10\n\n    Returns:\n        ServiceBulletinsResponse with bulletins or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getservicebulletins(self, rt, rtdir, stpid)\n    return self._parse_response(response, ServiceBulletinsResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getagencies","title":"<code>getagencies()</code>  <code>async</code>","text":"<p>Get agencies as typed response</p> <p>Returns:</p> Type Description <code>Union[AgenciesResponse, ErrorResponse]</code> <p>AgenciesResponse with agency details or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getagencies(self) -&gt; Union[AgenciesResponse, ErrorResponse]:\n    \"\"\"Get agencies as typed response\n\n    Returns:\n        AgenciesResponse with agency details or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getagencies(self)\n    return self._parse_response(response, AgenciesResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getdetours","title":"<code>getdetours(rt=None, rtdir=None, rtpidatafeed=None)</code>  <code>async</code>","text":"<p>Get detours as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | None</code> <p>Optional route designator (ex. '20' or 'X20')</p> <code>None</code> <code>rtdir</code> <code>str | None</code> <p>Optional route direction (requires rt parameter)</p> <code>None</code> <code>rtpidatafeed</code> <code>str | None</code> <p>Optional Real-Time Passenger Information data feed name (multi-feed only)</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[DetoursResponse, ErrorResponse]</code> <p>DetoursResponse with detour details or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getdetours(\n    self,\n    rt: str | None = None,\n    rtdir: str | None = None,\n    rtpidatafeed: str | None = None,\n) -&gt; Union[DetoursResponse, ErrorResponse]:\n    \"\"\"Get detours as typed response\n\n    Args:\n        rt: Optional route designator (ex. '20' or 'X20')\n        rtdir: Optional route direction (requires rt parameter)\n        rtpidatafeed: Optional Real-Time Passenger Information data feed name (multi-feed only)\n\n    Returns:\n        DetoursResponse with detour details or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getdetours(self, rt, rtdir, rtpidatafeed)\n    return self._parse_response(response, DetoursResponse)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.typedbustracker.AsyncTypedBusTracker.getlocalelist","title":"<code>getlocalelist(inlocalLanguge=False)</code>  <code>async</code>","text":"<p>Get locales list as typed response</p> <p>Parameters:</p> Name Type Description Default <code>inlocalLanguge</code> <code>bool</code> <p>Display names in the native language of the locale when true</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[LocalesResponse, ErrorResponse]</code> <p>LocalesResponse with available locales or ErrorResponse if error</p> Source code in <code>src/windytracker/bus/typedbustracker.py</code> <pre><code>async def getlocalelist(\n    self, inlocalLanguge: bool = False\n) -&gt; Union[LocalesResponse, ErrorResponse]:\n    \"\"\"Get locales list as typed response\n\n    Args:\n        inlocalLanguge: Display names in the native language of the locale when true\n\n    Returns:\n        LocalesResponse with available locales or ErrorResponse if error\n    \"\"\"\n    response = await AsyncBusTracker.getlocalelist(self, inlocalLanguge)\n    return self._parse_response(response, LocalesResponse)\n</code></pre>"},{"location":"api/bus/#basebustracker","title":"BaseBusTracker","text":""},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker","title":"<code>BaseBusTracker(key, locale='en', scheme='https', domain='ctabustracker.com')</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for CTA Bus Tracker API clients with shared validation logic.</p> <p>Initialize the base tracker.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>_type_</code> <p>CTA API key</p> required <code>locale</code> <code>str</code> <p>language code. Defaults to \"en\".</p> <code>'en'</code> <code>scheme</code> <code>str</code> <p>'https' or 'http. Defaults to \"https\".</p> <code>'https'</code> <code>domain</code> <code>str</code> <p>Set for different domain name. Defaults to \"ctabustracker.com\".</p> <code>'ctabustracker.com'</code> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@validate_arguments\ndef __init__(\n    self,\n    key,\n    locale: str = \"en\",\n    scheme: str = \"https\",\n    domain: str = \"ctabustracker.com\",\n):\n    \"\"\"Initialize the base tracker.\n\n    Args:\n        key (_type_): CTA API key\n        locale (str, optional): language code. Defaults to \"en\".\n        scheme (str, optional): 'https' or 'http. Defaults to \"https\".\n        domain (str, optional): Set for different domain name. Defaults to \"ctabustracker.com\".\n    \"\"\"\n    self._params = {\"key\": key, \"format\": \"json\", \"locale\": locale}\n    self._base_url = f\"{scheme}://{domain}/bustime/api/v3/\"\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.gettime","title":"<code>gettime(unixTime=False)</code>  <code>abstractmethod</code>","text":"<p>Returns the time of the server</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef gettime(self, unixTime=False) -&gt; dict:\n    \"\"\"Returns the time of the server\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getrtpidatafeeds","title":"<code>getrtpidatafeeds()</code>  <code>abstractmethod</code>","text":"<p>Get real time passenger information feeds</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getrtpidatafeeds(self) -&gt; dict:\n    \"\"\"Get real time passenger information feeds\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getvehicles","title":"<code>getvehicles(vid=None, rt=None, tmres='s')</code>  <code>abstractmethod</code>","text":"<p>Return a list of vehicles and their real-time data</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getvehicles(\n    self,\n    vid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    tmres: str = \"s\",\n) -&gt; dict:\n    \"\"\"Return a list of vehicles and their real-time data\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getroutes","title":"<code>getroutes()</code>  <code>abstractmethod</code>","text":"<p>Get all available routes</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getroutes(self) -&gt; dict:\n    \"\"\"Get all available routes\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getdirections","title":"<code>getdirections(rt)</code>  <code>abstractmethod</code>","text":"<p>Returns available directional routes</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getdirections(self, rt: str) -&gt; dict:\n    \"\"\"Returns available directional routes\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getstops","title":"<code>getstops(rt=None, dir=None, stpid=None)</code>  <code>abstractmethod</code>","text":"<p>Returns semi real-time stop info</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getstops(\n    self,\n    rt: str | None = None,\n    dir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; dict:\n    \"\"\"Returns semi real-time stop info\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getpatterns","title":"<code>getpatterns(pid=None, rt=None)</code>  <code>abstractmethod</code>","text":"<p>Return a set of points that create a pattern</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getpatterns(\n    self, pid: str | list[str] | None = None, rt: str | list[str] | None = None\n) -&gt; dict:\n    \"\"\"Return a set of points that create a pattern\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getpredictions","title":"<code>getpredictions(stpid=None, rt=None, vid=None, top=None, tmres='s')</code>  <code>abstractmethod</code>","text":"<p>Get real-time predictions for a list of stops</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getpredictions(\n    self,\n    stpid: str | list[str] | None = None,\n    rt: str | list[str] | None = None,\n    vid: str | list[str] | None = None,\n    top: int | None = None,\n    tmres: str = \"s\",\n) -&gt; dict:\n    \"\"\"Get real-time predictions for a list of stops\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getservicebulletins","title":"<code>getservicebulletins(rt=None, rtdir=None, stpid=None)</code>  <code>abstractmethod</code>","text":"<p>Get information about services for a given route or stop</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getservicebulletins(\n    self,\n    rt: str | list[str] | None = None,\n    rtdir: str | None = None,\n    stpid: str | list[str] | None = None,\n) -&gt; dict:\n    \"\"\"Get information about services for a given route or stop\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getlocalelist","title":"<code>getlocalelist(inlocalLanguge=False)</code>  <code>abstractmethod</code>","text":"<p>Get locales list</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getlocalelist(self, inlocalLanguge: bool = False) -&gt; dict:\n    \"\"\"Get locales list\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getdetours","title":"<code>getdetours(rt=None, rtdir=None, rtpidatafeed=None)</code>  <code>abstractmethod</code>","text":"<p>Get route detours</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getdetours(\n    self,\n    rt: str | None = None,\n    rtdir: str | None = None,\n    rtpidatafeed: str | None = None,\n) -&gt; dict:\n    \"\"\"Get route detours\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#windytracker.bus.base.BaseBusTracker.getagencies","title":"<code>getagencies()</code>  <code>abstractmethod</code>","text":"<p>Get agencies</p> Source code in <code>src/windytracker/bus/base.py</code> <pre><code>@abstractmethod\ndef getagencies(self) -&gt; dict:\n    \"\"\"Get agencies\"\"\"\n    pass\n</code></pre>"},{"location":"api/bus/#bus-models","title":"Bus Models","text":""},{"location":"api/bus/#windytracker.bus.models","title":"<code>models</code>","text":"<p>Pydantic models for CTA Bus Tracker API responses.</p> <p>Author: Ryan Fogle</p>"},{"location":"api/bus/#windytracker.bus.models-classes","title":"Classes","text":""},{"location":"api/bus/#windytracker.bus.models.BusTimeResponse","title":"<code>BusTimeResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base wrapper for all CTA API responses</p>"},{"location":"api/bus/#windytracker.bus.models.TimeResponse","title":"<code>TimeResponse</code>","text":"<p>               Bases: <code>BusTimeResponse</code></p>"},{"location":"api/bus/#windytracker.bus.models.TimeResponse-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.TimeResponse.parse_time_string","title":"<code>parse_time_string(v)</code>  <code>classmethod</code>","text":"<p>Parse CTA time string into datetime object</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"tm\", mode=\"before\")\n@classmethod\ndef parse_time_string(cls, v) -&gt; datetime:\n    \"\"\"Parse CTA time string into datetime object\"\"\"\n    if isinstance(v, datetime):\n        return v\n    if isinstance(v, str):\n        try:\n            # CTA format: \"20250717 22:47:33\"\n            return datetime.strptime(v, \"%Y%m%d %H:%M:%S\")\n        except ValueError:\n            raise ValueError(f\"Time must be in YYYYMMDD HH:MM:SS format, got: {v}\")\n    raise ValueError(f\"Time must be a string or datetime, got: {type(v)}\")\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Route","title":"<code>Route</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.Route-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.Route.validate_color","title":"<code>validate_color(v)</code>  <code>classmethod</code>","text":"<p>Validate hex color format</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"rtclr\")\n@classmethod\ndef validate_color(cls, v: str) -&gt; str:\n    \"\"\"Validate hex color format\"\"\"\n    if not v.startswith(\"#\"):\n        v = f\"#{v}\"\n    if len(v) != 7 or not all(c in \"0123456789ABCDEFabcdef\" for c in v[1:]):\n        raise ValueError(f\"Invalid hex color format: {v}\")\n    return v.upper()\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle","title":"<code>Vehicle</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.Vehicle-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_timestamp","title":"<code>validate_timestamp(v)</code>  <code>classmethod</code>","text":"<p>Validate timestamp format - supports both YYYYMMDD HH:MM and YYYYMMDD HH:MM:SS</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"tmstmp\")\n@classmethod\ndef validate_timestamp(cls, v: str) -&gt; str:\n    \"\"\"Validate timestamp format - supports both YYYYMMDD HH:MM and YYYYMMDD HH:MM:SS\"\"\"\n    formats = [\"%Y%m%d %H:%M:%S\", \"%Y%m%d %H:%M\"]\n    for fmt in formats:\n        try:\n            datetime.strptime(v, fmt)\n            return v\n        except ValueError:\n            continue\n    raise ValueError(\n        f\"Timestamp must be in YYYYMMDD HH:MM or YYYYMMDD HH:MM:SS format, got: {v}\"\n    )\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_coordinates","title":"<code>validate_coordinates(v)</code>  <code>classmethod</code>","text":"<p>Validate latitude/longitude are valid decimal degrees</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"lat\", \"lon\")\n@classmethod\ndef validate_coordinates(cls, v: str) -&gt; str:\n    \"\"\"Validate latitude/longitude are valid decimal degrees\"\"\"\n    try:\n        coord = float(v)  # noqa: F841\n        return v\n    except ValueError:\n        raise ValueError(f\"Coordinate must be a valid decimal number, got: {v}\")\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_heading","title":"<code>validate_heading(v)</code>  <code>classmethod</code>","text":"<p>Validate heading is between 0-360 degrees</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"hdg\")\n@classmethod\ndef validate_heading(cls, v: str) -&gt; str:\n    \"\"\"Validate heading is between 0-360 degrees\"\"\"\n    try:\n        heading = int(v)\n        if not 0 &lt;= heading &lt;= 360:\n            raise ValueError(\n                f\"Heading must be between 0-360 degrees, got: {heading}\"\n            )\n        return v\n    except ValueError as e:\n        if \"invalid literal\" in str(e):\n            raise ValueError(f\"Heading must be a valid integer, got: {v}\")\n        raise\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_pattern_distance","title":"<code>validate_pattern_distance(v)</code>  <code>classmethod</code>","text":"<p>Validate pattern distance is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"pdist\")\n@classmethod\ndef validate_pattern_distance(cls, v: int) -&gt; int:\n    \"\"\"Validate pattern distance is non-negative\"\"\"\n    if v &lt; 0:\n        raise ValueError(f\"Pattern distance must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_speed","title":"<code>validate_speed(v)</code>  <code>classmethod</code>","text":"<p>Validate speed is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"spd\")\n@classmethod\ndef validate_speed(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate speed is non-negative\"\"\"\n    if v is not None and v &lt; 0:\n        raise ValueError(f\"Speed must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_mode","title":"<code>validate_mode(v)</code>  <code>classmethod</code>","text":"<p>Validate transportation mode is valid</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"mode\")\n@classmethod\ndef validate_mode(cls, v: int) -&gt; int:\n    \"\"\"Validate transportation mode is valid\"\"\"\n    if not 0 &lt;= v &lt;= 4:\n        raise ValueError(\n            f\"Mode must be 0-4 (0=None, 1=Bus, 2=Ferry, 3=Rail, 4=People_Mover), got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_passenger_load","title":"<code>validate_passenger_load(v)</code>  <code>classmethod</code>","text":"<p>Validate passenger load value</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"psgld\")\n@classmethod\ndef validate_passenger_load(cls, v: str) -&gt; str:\n    \"\"\"Validate passenger load value\"\"\"\n    valid_loads = [\"FULL\", \"HALF_EMPTY\", \"EMPTY\", \"N/A\"]\n    if v not in valid_loads:\n        raise ValueError(f\"Passenger load must be one of {valid_loads}, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_stop_status","title":"<code>validate_stop_status(v)</code>  <code>classmethod</code>","text":"<p>Validate GTFS stop status</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"stopstatus\")\n@classmethod\ndef validate_stop_status(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate GTFS stop status\"\"\"\n    if v is not None and v not in [0, 1, 2]:\n        raise ValueError(\n            f\"Stop status must be 0 (STOPPED_AT), 1 (INCOMING_AT), or 2 (IN_TRANSIT_TO), got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_start_time","title":"<code>validate_start_time(v)</code>  <code>classmethod</code>","text":"<p>Validate start time is valid seconds past midnight</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"stst\")\n@classmethod\ndef validate_start_time(cls, v: int) -&gt; int:\n    \"\"\"Validate start time is valid seconds past midnight\"\"\"\n    if not 0 &lt;= v &lt;= 86400:  # 24 hours * 60 minutes * 60 seconds\n        raise ValueError(\n            f\"Start time must be between 0-86400 seconds past midnight, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Vehicle.validate_service_date","title":"<code>validate_service_date(v)</code>  <code>classmethod</code>","text":"<p>Validate service date format yyyy-mm-dd</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"stsd\")\n@classmethod\ndef validate_service_date(cls, v: str) -&gt; str:\n    \"\"\"Validate service date format yyyy-mm-dd\"\"\"\n    try:\n        datetime.strptime(v, \"%Y-%m-%d\")\n        return v\n    except ValueError:\n        raise ValueError(f\"Service date must be in yyyy-mm-dd format, got: {v}\")\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Stop","title":"<code>Stop</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.Stop-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.Stop.validate_latitude","title":"<code>validate_latitude(v)</code>  <code>classmethod</code>","text":"<p>Validate latitude is within valid range</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"lat\")\n@classmethod\ndef validate_latitude(cls, v: float) -&gt; float:\n    \"\"\"Validate latitude is within valid range\"\"\"\n    if not -90 &lt;= v &lt;= 90:\n        raise ValueError(f\"Latitude must be between -90 and 90 degrees, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Stop.validate_longitude","title":"<code>validate_longitude(v)</code>  <code>classmethod</code>","text":"<p>Validate longitude is within valid range</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"lon\")\n@classmethod\ndef validate_longitude(cls, v: float) -&gt; float:\n    \"\"\"Validate longitude is within valid range\"\"\"\n    if not -180 &lt;= v &lt;= 180:\n        raise ValueError(\n            f\"Longitude must be between -180 and 180 degrees, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Stop.validate_gtfs_sequence","title":"<code>validate_gtfs_sequence(v)</code>  <code>classmethod</code>","text":"<p>Validate GTFS sequence is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"gtfsseq\")\n@classmethod\ndef validate_gtfs_sequence(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate GTFS sequence is non-negative\"\"\"\n    if v is not None and v &lt; 0:\n        raise ValueError(f\"GTFS sequence must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction","title":"<code>Prediction</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.Prediction-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_prediction_type","title":"<code>validate_prediction_type(v)</code>  <code>classmethod</code>","text":"<p>Validate prediction type</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"typ\")\n@classmethod\ndef validate_prediction_type(cls, v: str) -&gt; str:\n    \"\"\"Validate prediction type\"\"\"\n    if v not in [\"A\", \"D\"]:\n        raise ValueError(\n            f\"Prediction type must be 'A' (arrival) or 'D' (departure), got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_dynamic_action","title":"<code>validate_dynamic_action(v)</code>  <code>classmethod</code>","text":"<p>Validate dynamic action type identifier</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"dyn\", mode=\"before\")\n@classmethod\ndef validate_dynamic_action(cls, v) -&gt; Optional[str]:\n    \"\"\"Validate dynamic action type identifier\"\"\"\n    if v is None:\n        return None\n\n    # Convert integer to string if needed\n    if isinstance(v, int):\n        v = str(v)\n\n    if isinstance(v, str):\n        # Dynamic Action Types from API documentation\n        valid_actions = {\n            \"0\": \"None - No change\",\n            \"1\": \"Canceled - The event or trip has been canceled\",\n            \"2\": \"Reassigned - The event or trip has been moved to a different work\",\n            \"3\": \"Shifted - The time of this event, or the entire trip, has been moved\",\n            \"4\": 'Expressed - The event is \"drop-off only\" and will not stop to pick up passengers',\n            \"6\": \"Stops Affected - This trip has events that are affected by Disruption Management changes\",\n            \"8\": \"New Trip - This trip was created dynamically and does not appear in the TA schedule\",\n            \"9\": \"Partial Trip - This trip has been split or short-turned\",\n            \"10\": \"Partial Trip New - This trip has been split with new trip identifier(s)\",\n            \"12\": \"Delayed Cancel - This event or trip has been marked as canceled (not public)\",\n            \"13\": \"Added Stop - This event has been added to the trip\",\n            \"14\": \"Unknown Delay - This trip has been affected by a delay\",\n            \"15\": \"Unknown Delay New - This dynamically created trip has been affected by a delay\",\n            \"16\": \"Invalidated Trip - This trip has been invalidated\",\n            \"17\": \"Invalidated Trip New - This dynamically created trip has been invalidated\",\n            \"18\": \"Cancelled Trip New - This dynamically created trip has been canceled\",\n            \"19\": \"Stops Affected New - This dynamically created trip has affected events\",\n        }\n        if v not in valid_actions:\n            raise ValueError(\n                f\"Dynamic action type must be one of {list(valid_actions.keys())}, got: {v}\"\n            )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_distance","title":"<code>validate_distance(v)</code>  <code>classmethod</code>","text":"<p>Validate distance is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"dstp\")\n@classmethod\ndef validate_distance(cls, v: int) -&gt; int:\n    \"\"\"Validate distance is non-negative\"\"\"\n    if v &lt; 0:\n        raise ValueError(f\"Distance must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_countdown","title":"<code>validate_countdown(v)</code>  <code>classmethod</code>","text":"<p>Validate countdown format</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"prdctdn\")\n@classmethod\ndef validate_countdown(cls, v: str) -&gt; str:\n    \"\"\"Validate countdown format\"\"\"\n    if v.lower() in [\"due\", \"dly\"]:  # Special CTA values\n        return v\n    try:\n        minutes = int(v)\n        if minutes &lt; 0:\n            raise ValueError(\n                f\"Countdown minutes must be non-negative, got: {minutes}\"\n            )\n        return v\n    except ValueError:\n        if v.lower() not in [\"due\", \"dly\"]:\n            raise ValueError(\n                f\"Countdown must be a number, 'DUE', or 'DLY', got: {v}\"\n            )\n        return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_next_bus","title":"<code>validate_next_bus(v)</code>  <code>classmethod</code>","text":"<p>Validate next bus minutes is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"nbus\")\n@classmethod\ndef validate_next_bus(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate next bus minutes is non-negative\"\"\"\n    if v is not None and v &lt; 0:\n        raise ValueError(f\"Next bus minutes must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_passenger_load","title":"<code>validate_passenger_load(v)</code>  <code>classmethod</code>","text":"<p>Validate passenger load value</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"psgld\", mode=\"before\")\n@classmethod\ndef validate_passenger_load(cls, v) -&gt; Optional[str]:\n    \"\"\"Validate passenger load value\"\"\"\n    if v is None:\n        return None\n\n    # Convert to string and handle empty strings\n    if isinstance(v, (int, float)):\n        v = str(v)\n\n    if isinstance(v, str):\n        # Handle empty string by treating as N/A\n        if v.strip() == \"\":\n            return \"N/A\"\n\n        # Valid passenger load values\n        valid_loads = [\"FULL\", \"HALF_EMPTY\", \"EMPTY\", \"N/A\"]\n        if v not in valid_loads:\n            # If it's an unrecognized value, default to N/A\n            return \"N/A\"\n\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_gtfs_sequence","title":"<code>validate_gtfs_sequence(v)</code>  <code>classmethod</code>","text":"<p>Validate GTFS sequence is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"gtfsseq\")\n@classmethod\ndef validate_gtfs_sequence(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate GTFS sequence is non-negative\"\"\"\n    if v is not None and v &lt; 0:\n        raise ValueError(f\"GTFS sequence must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_start_time","title":"<code>validate_start_time(v)</code>  <code>classmethod</code>","text":"<p>Validate start time is valid seconds past midnight</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"stst\")\n@classmethod\ndef validate_start_time(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate start time is valid seconds past midnight\"\"\"\n    if v is not None and not 0 &lt;= v &lt;= 86400:  # 24 hours * 60 minutes * 60 seconds\n        raise ValueError(\n            f\"Start time must be between 0-86400 seconds past midnight, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_service_date","title":"<code>validate_service_date(v)</code>  <code>classmethod</code>","text":"<p>Validate service date format yyyy-mm-dd</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"stsd\")\n@classmethod\ndef validate_service_date(cls, v: Optional[str]) -&gt; Optional[str]:\n    \"\"\"Validate service date format yyyy-mm-dd\"\"\"\n    if v is not None:\n        try:\n            datetime.strptime(v, \"%Y-%m-%d\")\n            return v\n        except ValueError:\n            raise ValueError(f\"Service date must be in yyyy-mm-dd format, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Prediction.validate_flag_stop","title":"<code>validate_flag_stop(v)</code>  <code>classmethod</code>","text":"<p>Validate flag stop code</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"flagstop\")\n@classmethod\ndef validate_flag_stop(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate flag stop code\"\"\"\n    if v is not None and v not in [-1, 0, 1, 2]:\n        raise ValueError(\n            f\"Flag stop must be -1 (UNDEFINED), 0 (NORMAL), 1 (PICKUP_AND_DISCHARGE), or 2 (ONLY_DISCHARGE), got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.PatternPoint","title":"<code>PatternPoint</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.PatternPoint-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.PatternPoint.validate_sequence","title":"<code>validate_sequence(v)</code>  <code>classmethod</code>","text":"<p>Validate sequence is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"seq\")\n@classmethod\ndef validate_sequence(cls, v: int) -&gt; int:\n    \"\"\"Validate sequence is non-negative\"\"\"\n    if v &lt; 0:\n        raise ValueError(f\"Sequence must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.PatternPoint.validate_type","title":"<code>validate_type(v)</code>  <code>classmethod</code>","text":"<p>Validate point type</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"typ\")\n@classmethod\ndef validate_type(cls, v: str) -&gt; str:\n    \"\"\"Validate point type\"\"\"\n    if v not in [\"S\", \"W\"]:\n        raise ValueError(\n            f\"Point type must be 'S' (stop) or 'W' (waypoint), got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.PatternPoint.validate_distance","title":"<code>validate_distance(v)</code>  <code>classmethod</code>","text":"<p>Validate distance is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"pdist\")\n@classmethod\ndef validate_distance(cls, v: float) -&gt; float:\n    \"\"\"Validate distance is non-negative\"\"\"\n    if v &lt; 0:\n        raise ValueError(f\"Pattern distance must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.PatternPoint.validate_latitude","title":"<code>validate_latitude(v)</code>  <code>classmethod</code>","text":"<p>Validate latitude is within valid range</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"lat\")\n@classmethod\ndef validate_latitude(cls, v: float) -&gt; float:\n    \"\"\"Validate latitude is within valid range\"\"\"\n    if not -90 &lt;= v &lt;= 90:\n        raise ValueError(f\"Latitude must be between -90 and 90 degrees, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.PatternPoint.validate_longitude","title":"<code>validate_longitude(v)</code>  <code>classmethod</code>","text":"<p>Validate longitude is within valid range</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"lon\")\n@classmethod\ndef validate_longitude(cls, v: float) -&gt; float:\n    \"\"\"Validate longitude is within valid range\"\"\"\n    if not -180 &lt;= v &lt;= 180:\n        raise ValueError(\n            f\"Longitude must be between -180 and 180 degrees, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.DetourPoint","title":"<code>DetourPoint</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents original pattern points for detoured patterns</p>"},{"location":"api/bus/#windytracker.bus.models.DetourPoint-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.DetourPoint.validate_sequence","title":"<code>validate_sequence(v)</code>  <code>classmethod</code>","text":"<p>Validate sequence is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"seq\")\n@classmethod\ndef validate_sequence(cls, v: int) -&gt; int:\n    \"\"\"Validate sequence is non-negative\"\"\"\n    if v &lt; 0:\n        raise ValueError(f\"Sequence must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.DetourPoint.validate_type","title":"<code>validate_type(v)</code>  <code>classmethod</code>","text":"<p>Validate point type</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"typ\")\n@classmethod\ndef validate_type(cls, v: str) -&gt; str:\n    \"\"\"Validate point type\"\"\"\n    if v not in [\"S\", \"W\"]:\n        raise ValueError(\n            f\"Point type must be 'S' (stop) or 'W' (waypoint), got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.DetourPoint.validate_distance","title":"<code>validate_distance(v)</code>  <code>classmethod</code>","text":"<p>Validate distance is non-negative</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"pdist\")\n@classmethod\ndef validate_distance(cls, v: float) -&gt; float:\n    \"\"\"Validate distance is non-negative\"\"\"\n    if v &lt; 0:\n        raise ValueError(f\"Pattern distance must be non-negative, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.DetourPoint.validate_latitude","title":"<code>validate_latitude(v)</code>  <code>classmethod</code>","text":"<p>Validate latitude is within valid range</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"lat\")\n@classmethod\ndef validate_latitude(cls, v: float) -&gt; float:\n    \"\"\"Validate latitude is within valid range\"\"\"\n    if not -90 &lt;= v &lt;= 90:\n        raise ValueError(f\"Latitude must be between -90 and 90 degrees, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.DetourPoint.validate_longitude","title":"<code>validate_longitude(v)</code>  <code>classmethod</code>","text":"<p>Validate longitude is within valid range</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"lon\")\n@classmethod\ndef validate_longitude(cls, v: float) -&gt; float:\n    \"\"\"Validate longitude is within valid range\"\"\"\n    if not -180 &lt;= v &lt;= 180:\n        raise ValueError(\n            f\"Longitude must be between -180 and 180 degrees, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Pattern","title":"<code>Pattern</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.Pattern-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.Pattern.validate_pattern_id","title":"<code>validate_pattern_id(v)</code>  <code>classmethod</code>","text":"<p>Validate pattern ID is positive</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"pid\")\n@classmethod\ndef validate_pattern_id(cls, v: int) -&gt; int:\n    \"\"\"Validate pattern ID is positive\"\"\"\n    if v &lt;= 0:\n        raise ValueError(f\"Pattern ID must be positive, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Pattern.validate_length","title":"<code>validate_length(v)</code>  <code>classmethod</code>","text":"<p>Validate pattern length is positive</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"ln\")\n@classmethod\ndef validate_length(cls, v: float) -&gt; float:\n    \"\"\"Validate pattern length is positive\"\"\"\n    if v &lt;= 0:\n        raise ValueError(f\"Pattern length must be positive, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.ServiceAffected","title":"<code>ServiceAffected</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents one or a combination of route, direction and stop for which a service bulletin is valid</p>"},{"location":"api/bus/#windytracker.bus.models.ServiceBulletin","title":"<code>ServiceBulletin</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.ServiceBulletin-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.ServiceBulletin.validate_priority","title":"<code>validate_priority(v)</code>  <code>classmethod</code>","text":"<p>Validate service bulletin priority</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"prty\")\n@classmethod\ndef validate_priority(cls, v: str) -&gt; str:\n    \"\"\"Validate service bulletin priority\"\"\"\n    valid_priorities = [\"High\", \"Medium\", \"Low\"]\n    if v not in valid_priorities:\n        raise ValueError(f\"Priority must be one of {valid_priorities}, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.ServiceBulletin.validate_modification_time","title":"<code>validate_modification_time(v)</code>  <code>classmethod</code>","text":"<p>Validate modification timestamp format</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"mod\", mode=\"before\")\n@classmethod\ndef validate_modification_time(cls, v: Optional[str]) -&gt; Optional[str]:\n    \"\"\"Validate modification timestamp format\"\"\"\n    if v is not None:\n        # Handle empty strings by returning None\n        if isinstance(v, str) and not v.strip():\n            return None\n        try:\n            datetime.strptime(v, \"%Y%m%d %H:%M:%S\")\n            return v\n        except ValueError:\n            raise ValueError(\n                f\"Modification time must be in YYYYMMDD HH:MM:SS format, got: {v}\"\n            )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.ServiceBulletin.validate_url","title":"<code>validate_url(v)</code>  <code>classmethod</code>","text":"<p>Validate URL format (basic check)</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"url\")\n@classmethod\ndef validate_url(cls, v: Optional[str]) -&gt; Optional[str]:\n    \"\"\"Validate URL format (basic check)\"\"\"\n    if v is not None and v.strip():\n        # Basic URL validation - check if it looks like a URL\n        if not (\n            v.startswith(\"http://\")\n            or v.startswith(\"https://\")\n            or v.startswith(\"ftp://\")\n        ):\n            # Allow relative URLs or other schemes\n            pass\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.RtpiDataFeed","title":"<code>RtpiDataFeed</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.RtpiDataFeed-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.RtpiDataFeed.parse_boolean_strings","title":"<code>parse_boolean_strings(v)</code>  <code>classmethod</code>","text":"<p>Parse boolean values that might come as strings from the API</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"enabled\", \"visible\", mode=\"before\")\n@classmethod\ndef parse_boolean_strings(cls, v) -&gt; bool:\n    \"\"\"Parse boolean values that might come as strings from the API\"\"\"\n    if isinstance(v, bool):\n        return v\n    if isinstance(v, str):\n        return v.lower() in (\"true\", \"1\", \"yes\", \"on\")\n    return bool(v)\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.RouteDirection","title":"<code>RouteDirection</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a route and direction affected by a detour</p>"},{"location":"api/bus/#windytracker.bus.models.Detour","title":"<code>Detour</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.Detour-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.Detour.validate_state","title":"<code>validate_state(v)</code>  <code>classmethod</code>","text":"<p>Validate detour state</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"st\")\n@classmethod\ndef validate_state(cls, v: int) -&gt; int:\n    \"\"\"Validate detour state\"\"\"\n    if v not in [0, 1]:\n        raise ValueError(\n            f\"Detour state must be 0 (canceled) or 1 (active), got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Detour.validate_version","title":"<code>validate_version(v)</code>  <code>classmethod</code>","text":"<p>Validate version is positive</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"ver\")\n@classmethod\ndef validate_version(cls, v: int) -&gt; int:\n    \"\"\"Validate version is positive\"\"\"\n    if v &lt;= 0:\n        raise ValueError(f\"Detour version must be positive, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.DetoursResponse","title":"<code>DetoursResponse</code>","text":"<p>               Bases: <code>BusTimeResponse</code></p>"},{"location":"api/bus/#windytracker.bus.models.DetoursResponse-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.DetoursResponse.validate_detours","title":"<code>validate_detours(v)</code>  <code>classmethod</code>","text":"<p>Handle missing or empty responses by returning empty list</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"dtr\", mode=\"before\")\n@classmethod\ndef validate_detours(cls, v):\n    \"\"\"Handle missing or empty responses by returning empty list\"\"\"\n    if v is None:\n        return []\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.Agency","title":"<code>Agency</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/bus/#windytracker.bus.models.Agency-functions","title":"Functions","text":""},{"location":"api/bus/#windytracker.bus.models.Agency.validate_agency_id","title":"<code>validate_agency_id(v)</code>  <code>classmethod</code>","text":"<p>Validate agency ID is positive if provided</p> Source code in <code>src/windytracker/bus/models.py</code> <pre><code>@field_validator(\"agencyid\")\n@classmethod\ndef validate_agency_id(cls, v: Optional[int]) -&gt; Optional[int]:\n    \"\"\"Validate agency ID is positive if provided\"\"\"\n    if v is not None and v &lt;= 0:\n        raise ValueError(f\"Agency ID must be positive if provided, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/bus/#windytracker.bus.models.ErrorResponse","title":"<code>ErrorResponse</code>","text":"<p>               Bases: <code>BusTimeResponse</code></p> <p>Error response wrapper for API errors.</p> <p>Common Error Messages: - \"No data found for parameter(s)\" - No results matched given parameters - \"Invalid parameter provided\" - Parameter doesn't match any known ID - \"Maximum number of  identifiers exceeded\" - Too many IDs in request - \"Invalid RTPI Data Feed parameter\" - Invalid or disabled feed - \"No RTPI Data Feed parameter provided\" - Required in multi-feed systems - \"Transaction limit for current day has been exceeded\" - API quota exceeded - \"No service scheduled\" - Stop has no service scheduled - \"No arrival times\" - Stop has no scheduled arrival times <p>API Version 3 Enhancements: - Enhanced multi-feed error handling - Disruption management error support - More specific parameter validation errors</p>"},{"location":"api/train/","title":"Train API","text":"<p>Auto-generated API documentation for train tracking functionality.</p> <p>WindyTracker uses data provided by CTA</p>"},{"location":"api/train/#traintracker","title":"TrainTracker","text":""},{"location":"api/train/#windytracker.train.traintracker.TrainTracker","title":"<code>TrainTracker(key)</code>","text":"<p>               Bases: <code>BaseTrainTracker</code></p> <p>Synchronous class built to handle validating and returning CTA train arrivals responses. Very closely resembles how the API is built.</p> <p>Example usage:</p> <p>cta = TrainTracker(key='secret_key') cta.arrivals(mapid='40380')</p> <p>Initialize the synchronous TrainTracker.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>CTA API key</p> required <p>Raises:</p> Type Description <code>ImportError</code> <p>If requests is not installed.</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>def __init__(self, key):\n    \"\"\"Initialize the synchronous TrainTracker.\n\n    Args:\n        key: CTA API key\n\n    Raises:\n        ImportError: If requests is not installed.\n    \"\"\"\n    if not HAS_REQUESTS:\n        raise ImportError(\n            \"requests is required for synchronous operations. \"\n            \"Install with: pip install cta[sync] or pip install cta[all]\"\n        )\n    super().__init__(key)\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.TrainTracker-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.traintracker.TrainTracker.arrivals","title":"<code>arrivals(mapid=None, stpid=None, max=None, rt=None)</code>","text":"<p>Get arrival predictions for train stations.</p> <p>Parameters:</p> Name Type Description Default <code>mapid</code> <code>str | None</code> <p>Numeric station identifier (required if stpid not specified). A single five-digit code to tell the server which station you'd like to receive predictions for. Defaults to None.</p> <code>None</code> <code>stpid</code> <code>str | None</code> <p>Numeric stop identifier (required if mapid not specified). A single five-digit code to tell the server which specific stop you'd like to receive predictions for. Defaults to None.</p> <code>None</code> <code>max</code> <code>str | None</code> <p>Maximum number of results to return. If not specified, all available results for the requested stop or station will be returned. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | None</code> <p>Route code. Allows you to specify a single route for which you'd like results. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>@validate_arguments\ndef arrivals(\n    self,\n    mapid: str | None = None,\n    stpid: str | None = None,\n    max: str | None = None,\n    rt: str | None = None,\n) -&gt; dict:\n    \"\"\"Get arrival predictions for train stations.\n\n    Args:\n        mapid (str | None): Numeric station identifier (required if stpid not specified). A single five-digit code to tell the server which station you'd like to receive predictions for. Defaults to None.\n        stpid (str | None): Numeric stop identifier (required if mapid not specified). A single five-digit code to tell the server which specific stop you'd like to receive predictions for. Defaults to None.\n        max (str | None, optional): Maximum number of results to return. If not specified, all available results for the requested stop or station will be returned. Defaults to None.\n        rt (str | None, optional): Route code. Allows you to specify a single route for which you'd like results. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_arrivals_params(mapid, stpid, max, rt)\n    r = requests.get(self._format_url(ApiRoutes.ARRIVALS, params))\n    return r.json()\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.TrainTracker.follow","title":"<code>follow(runnumber)</code>","text":"<p>Follow a specific train by run number and get all upcoming arrival predictions.</p> <p>Parameters:</p> Name Type Description Default <code>runnumber</code> <code>str</code> <p>Train run number. Allows you to specify a single run number for a train for which you'd like a series of upcoming arrival estimations.</p> required <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>@validate_arguments\ndef follow(\n    self,\n    runnumber: str,\n) -&gt; dict:\n    \"\"\"Follow a specific train by run number and get all upcoming arrival predictions.\n\n    Args:\n        runnumber (str): Train run number. Allows you to specify a single run number for a train for which you'd like a series of upcoming arrival estimations.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_follow_params(runnumber)\n    r = requests.get(self._format_url(ApiRoutes.FOLLOW, params))\n    return r.json()\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.TrainTracker.positions","title":"<code>positions(rt)</code>","text":"<p>Get locations for trains on specified routes.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str]</code> <p>Train route(s). Allows you to specify one or more routes for which you'd like train location information.</p> required <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>@validate_arguments\ndef positions(\n    self,\n    rt: str | list[str],\n) -&gt; dict:\n    \"\"\"Get locations for trains on specified routes.\n\n    Args:\n        rt (str | list[str]): Train route(s). Allows you to specify one or more routes for which you'd like train location information.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_positions_params(rt)\n    r = requests.get(self._format_url(ApiRoutes.POSITIONS, params))\n    return r.json()\n</code></pre>"},{"location":"api/train/#asynctraintracker","title":"AsyncTrainTracker","text":""},{"location":"api/train/#windytracker.train.traintracker.AsyncTrainTracker","title":"<code>AsyncTrainTracker(key)</code>","text":"<p>               Bases: <code>BaseTrainTracker</code></p> <p>Asynchronous class built to handle validating and returning CTA train arrivals responses. Very closely resembles how the API is built.</p> <p>Example usage:</p> <p>async with AsyncTrainTracker(key='secret_key') as cta: ...     arrivals = await cta.arrivals(mapid='40380')</p> <p>Initialize the asynchronous AsyncTrainTracker.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>CTA API key</p> required <p>Raises:</p> Type Description <code>ImportError</code> <p>If aiohttp is not installed.</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>def __init__(self, key):\n    \"\"\"Initialize the asynchronous AsyncTrainTracker.\n\n    Args:\n        key: CTA API key\n\n    Raises:\n        ImportError: If aiohttp is not installed.\n    \"\"\"\n    if not HAS_AIOHTTP:\n        raise ImportError(\n            \"aiohttp is required for asynchronous operations. \"\n            \"Install with: pip install cta[async] or pip install cta[all]\"\n        )\n    super().__init__(key)\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.AsyncTrainTracker-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.traintracker.AsyncTrainTracker.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Async context manager entry.</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>async def __aenter__(self):\n    \"\"\"Async context manager entry.\"\"\"\n    if not HAS_AIOHTTP:\n        raise ImportError(\n            \"aiohttp is required for asynchronous operations. \"\n            \"Install with: pip install cta[async] or pip install cta[all]\"\n        )\n    self._session = aiohttp.ClientSession()\n    return self\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.AsyncTrainTracker.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Async context manager exit.</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>async def __aexit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Async context manager exit.\"\"\"\n    if hasattr(self, \"_session\"):\n        await self._session.close()\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.AsyncTrainTracker.arrivals","title":"<code>arrivals(mapid=None, stpid=None, max=None, rt=None)</code>  <code>async</code>","text":"<p>Get arrival predictions for train stations.</p> <p>Parameters:</p> Name Type Description Default <code>mapid</code> <code>str | None</code> <p>Numeric station identifier (required if stpid not specified). A single five-digit code to tell the server which station you'd like to receive predictions for. Defaults to None.</p> <code>None</code> <code>stpid</code> <code>str | None</code> <p>Numeric stop identifier (required if mapid not specified). A single five-digit code to tell the server which specific stop you'd like to receive predictions for. Defaults to None.</p> <code>None</code> <code>max</code> <code>str | None</code> <p>Maximum number of results to return. If not specified, all available results for the requested stop or station will be returned. Defaults to None.</p> <code>None</code> <code>rt</code> <code>str | None</code> <p>Route code. Allows you to specify a single route for which you'd like results. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>@validate_arguments\nasync def arrivals(\n    self,\n    mapid: str | None = None,\n    stpid: str | None = None,\n    max: str | None = None,\n    rt: str | None = None,\n) -&gt; dict:\n    \"\"\"Get arrival predictions for train stations.\n\n    Args:\n        mapid (str | None): Numeric station identifier (required if stpid not specified). A single five-digit code to tell the server which station you'd like to receive predictions for. Defaults to None.\n        stpid (str | None): Numeric stop identifier (required if mapid not specified). A single five-digit code to tell the server which specific stop you'd like to receive predictions for. Defaults to None.\n        max (str | None, optional): Maximum number of results to return. If not specified, all available results for the requested stop or station will be returned. Defaults to None.\n        rt (str | None, optional): Route code. Allows you to specify a single route for which you'd like results. Defaults to None.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_arrivals_params(mapid, stpid, max, rt)\n    async with self._session.get(\n        self._format_url(ApiRoutes.ARRIVALS, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.AsyncTrainTracker.follow","title":"<code>follow(runnumber)</code>  <code>async</code>","text":"<p>Follow a specific train by run number and get all upcoming arrival predictions.</p> <p>Parameters:</p> Name Type Description Default <code>runnumber</code> <code>str</code> <p>Train run number. Allows you to specify a single run number for a train for which you'd like a series of upcoming arrival estimations.</p> required <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>@validate_arguments\nasync def follow(\n    self,\n    runnumber: str,\n) -&gt; dict:\n    \"\"\"Follow a specific train by run number and get all upcoming arrival predictions.\n\n    Args:\n        runnumber (str): Train run number. Allows you to specify a single run number for a train for which you'd like a series of upcoming arrival estimations.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_follow_params(runnumber)\n    async with self._session.get(\n        self._format_url(ApiRoutes.FOLLOW, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/train/#windytracker.train.traintracker.AsyncTrainTracker.positions","title":"<code>positions(rt)</code>  <code>async</code>","text":"<p>Get locations for trains on specified routes.</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str]</code> <p>Train route(s). Allows you to specify one or more routes for which you'd like train location information.</p> required <p>Raises:</p> Type Description <code>ApiArgumentError</code> <p>Error when arguments are invalid.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>json response</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>@validate_arguments\nasync def positions(\n    self,\n    rt: str | list[str],\n) -&gt; dict:\n    \"\"\"Get locations for trains on specified routes.\n\n    Args:\n        rt (str | list[str]): Train route(s). Allows you to specify one or more routes for which you'd like train location information.\n\n    Raises:\n        ApiArgumentError: Error when arguments are invalid.\n\n    Returns:\n        dict: json response\n    \"\"\"\n    params = self._validate_positions_params(rt)\n    async with self._session.get(\n        self._format_url(ApiRoutes.POSITIONS, params)\n    ) as resp:\n        return await resp.json()\n</code></pre>"},{"location":"api/train/#typedtraintracker","title":"TypedTrainTracker","text":""},{"location":"api/train/#windytracker.train.typedtraintracker.TypedTrainTracker","title":"<code>TypedTrainTracker(key)</code>","text":"<p>               Bases: <code>BaseTypedTrainTracker</code>, <code>TrainTracker</code></p> <p>Synchronous typed version of TrainTracker that returns Pydantic models instead of raw dicts.</p> <p>Example usage:</p> <p>tracker = TypedTrainTracker(key='secret_key') arrivals = tracker.arrivals(mapid='40380') print(arrivals.ctatt.eta[0].staNm)  # Autocomplete works!</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>def __init__(self, key):\n    \"\"\"Initialize the synchronous TrainTracker.\n\n    Args:\n        key: CTA API key\n\n    Raises:\n        ImportError: If requests is not installed.\n    \"\"\"\n    if not HAS_REQUESTS:\n        raise ImportError(\n            \"requests is required for synchronous operations. \"\n            \"Install with: pip install cta[sync] or pip install cta[all]\"\n        )\n    super().__init__(key)\n</code></pre>"},{"location":"api/train/#windytracker.train.typedtraintracker.TypedTrainTracker-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.typedtraintracker.TypedTrainTracker.arrivals","title":"<code>arrivals(mapid=None, stpid=None, max=None, rt=None)</code>","text":"<p>Get arrival predictions for train stations as typed response</p> <p>Parameters:</p> Name Type Description Default <code>mapid</code> <code>str | None</code> <p>Numeric station identifier (required if stpid not specified)</p> <code>None</code> <code>stpid</code> <code>str | None</code> <p>Numeric stop identifier (required if mapid not specified)</p> <code>None</code> <code>max</code> <code>str | None</code> <p>Maximum number of results to return (as string)</p> <code>None</code> <code>rt</code> <code>str | None</code> <p>Route code for filtering results</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[CtattResponse, ErrorResponse]</code> <p>CtattResponse with arrival predictions or ErrorResponse if error</p> Source code in <code>src/windytracker/train/typedtraintracker.py</code> <pre><code>def arrivals(\n    self,\n    mapid: str | None = None,\n    stpid: str | None = None,\n    max: str | None = None,\n    rt: str | None = None,\n) -&gt; Union[CtattResponse, ErrorResponse]:\n    \"\"\"Get arrival predictions for train stations as typed response\n\n    Args:\n        mapid: Numeric station identifier (required if stpid not specified)\n        stpid: Numeric stop identifier (required if mapid not specified)\n        max: Maximum number of results to return (as string)\n        rt: Route code for filtering results\n\n    Returns:\n        CtattResponse with arrival predictions or ErrorResponse if error\n    \"\"\"\n    response = TrainTracker.arrivals(self, mapid, stpid, max, rt)\n    return self._parse_response(response, CtattResponse)\n</code></pre>"},{"location":"api/train/#windytracker.train.typedtraintracker.TypedTrainTracker.follow","title":"<code>follow(runnumber)</code>","text":"<p>Follow a specific train by run number as typed response</p> <p>Parameters:</p> Name Type Description Default <code>runnumber</code> <code>str</code> <p>Train run number for which to get upcoming arrival predictions</p> required <p>Returns:</p> Type Description <code>Union[CtattFollowResponse, ErrorResponse]</code> <p>CtattFollowResponse with train position and arrival predictions or ErrorResponse if error</p> Source code in <code>src/windytracker/train/typedtraintracker.py</code> <pre><code>def follow(\n    self,\n    runnumber: str,\n) -&gt; Union[CtattFollowResponse, ErrorResponse]:\n    \"\"\"Follow a specific train by run number as typed response\n\n    Args:\n        runnumber: Train run number for which to get upcoming arrival predictions\n\n    Returns:\n        CtattFollowResponse with train position and arrival predictions or ErrorResponse if error\n    \"\"\"\n    response = TrainTracker.follow(self, runnumber)\n    return self._parse_response(response, CtattFollowResponse)\n</code></pre>"},{"location":"api/train/#windytracker.train.typedtraintracker.TypedTrainTracker.positions","title":"<code>positions(rt)</code>","text":"<p>Get locations for trains on specified routes as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str]</code> <p>Train route(s) for which to get train location information</p> required <p>Returns:</p> Type Description <code>Union[CtattPositionsResponse, ErrorResponse]</code> <p>CtattPositionsResponse with train locations or ErrorResponse if error</p> Source code in <code>src/windytracker/train/typedtraintracker.py</code> <pre><code>def positions(\n    self,\n    rt: str | list[str],\n) -&gt; Union[CtattPositionsResponse, ErrorResponse]:\n    \"\"\"Get locations for trains on specified routes as typed response\n\n    Args:\n        rt: Train route(s) for which to get train location information\n\n    Returns:\n        CtattPositionsResponse with train locations or ErrorResponse if error\n    \"\"\"\n    response = TrainTracker.positions(self, rt)\n    return self._parse_response(response, CtattPositionsResponse)\n</code></pre>"},{"location":"api/train/#asynctypedtraintracker","title":"AsyncTypedTrainTracker","text":""},{"location":"api/train/#windytracker.train.typedtraintracker.AsyncTypedTrainTracker","title":"<code>AsyncTypedTrainTracker(key)</code>","text":"<p>               Bases: <code>BaseTypedTrainTracker</code>, <code>AsyncTrainTracker</code></p> <p>Asynchronous typed version of AsyncTrainTracker that returns Pydantic models instead of raw dicts.</p> <p>Example usage:</p> <p>async with AsyncTypedTrainTracker(key='secret_key') as tracker: ...     arrivals = await tracker.arrivals(mapid='40380') ...     print(arrivals.ctatt.eta[0].staNm)  # Autocomplete works!</p> Source code in <code>src/windytracker/train/traintracker.py</code> <pre><code>def __init__(self, key):\n    \"\"\"Initialize the asynchronous AsyncTrainTracker.\n\n    Args:\n        key: CTA API key\n\n    Raises:\n        ImportError: If aiohttp is not installed.\n    \"\"\"\n    if not HAS_AIOHTTP:\n        raise ImportError(\n            \"aiohttp is required for asynchronous operations. \"\n            \"Install with: pip install cta[async] or pip install cta[all]\"\n        )\n    super().__init__(key)\n</code></pre>"},{"location":"api/train/#windytracker.train.typedtraintracker.AsyncTypedTrainTracker-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.typedtraintracker.AsyncTypedTrainTracker.arrivals","title":"<code>arrivals(mapid=None, stpid=None, max=None, rt=None)</code>  <code>async</code>","text":"<p>Get arrival predictions for train stations as typed response</p> <p>Parameters:</p> Name Type Description Default <code>mapid</code> <code>str | None</code> <p>Numeric station identifier (required if stpid not specified)</p> <code>None</code> <code>stpid</code> <code>str | None</code> <p>Numeric stop identifier (required if mapid not specified)</p> <code>None</code> <code>max</code> <code>str | None</code> <p>Maximum number of results to return (as string)</p> <code>None</code> <code>rt</code> <code>str | None</code> <p>Route code for filtering results</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[CtattResponse, ErrorResponse]</code> <p>CtattResponse with arrival predictions or ErrorResponse if error</p> Source code in <code>src/windytracker/train/typedtraintracker.py</code> <pre><code>async def arrivals(\n    self,\n    mapid: str | None = None,\n    stpid: str | None = None,\n    max: str | None = None,\n    rt: str | None = None,\n) -&gt; Union[CtattResponse, ErrorResponse]:\n    \"\"\"Get arrival predictions for train stations as typed response\n\n    Args:\n        mapid: Numeric station identifier (required if stpid not specified)\n        stpid: Numeric stop identifier (required if mapid not specified)\n        max: Maximum number of results to return (as string)\n        rt: Route code for filtering results\n\n    Returns:\n        CtattResponse with arrival predictions or ErrorResponse if error\n    \"\"\"\n    response = await AsyncTrainTracker.arrivals(self, mapid, stpid, max, rt)\n    return self._parse_response(response, CtattResponse)\n</code></pre>"},{"location":"api/train/#windytracker.train.typedtraintracker.AsyncTypedTrainTracker.follow","title":"<code>follow(runnumber)</code>  <code>async</code>","text":"<p>Follow a specific train by run number as typed response</p> <p>Parameters:</p> Name Type Description Default <code>runnumber</code> <code>str</code> <p>Train run number for which to get upcoming arrival predictions</p> required <p>Returns:</p> Type Description <code>Union[CtattFollowResponse, ErrorResponse]</code> <p>CtattFollowResponse with train position and arrival predictions or ErrorResponse if error</p> Source code in <code>src/windytracker/train/typedtraintracker.py</code> <pre><code>async def follow(\n    self,\n    runnumber: str,\n) -&gt; Union[CtattFollowResponse, ErrorResponse]:\n    \"\"\"Follow a specific train by run number as typed response\n\n    Args:\n        runnumber: Train run number for which to get upcoming arrival predictions\n\n    Returns:\n        CtattFollowResponse with train position and arrival predictions or ErrorResponse if error\n    \"\"\"\n    response = await AsyncTrainTracker.follow(self, runnumber)\n    return self._parse_response(response, CtattFollowResponse)\n</code></pre>"},{"location":"api/train/#windytracker.train.typedtraintracker.AsyncTypedTrainTracker.positions","title":"<code>positions(rt)</code>  <code>async</code>","text":"<p>Get locations for trains on specified routes as typed response</p> <p>Parameters:</p> Name Type Description Default <code>rt</code> <code>str | list[str]</code> <p>Train route(s) for which to get train location information</p> required <p>Returns:</p> Type Description <code>Union[CtattPositionsResponse, ErrorResponse]</code> <p>CtattPositionsResponse with train locations or ErrorResponse if error</p> Source code in <code>src/windytracker/train/typedtraintracker.py</code> <pre><code>async def positions(\n    self,\n    rt: str | list[str],\n) -&gt; Union[CtattPositionsResponse, ErrorResponse]:\n    \"\"\"Get locations for trains on specified routes as typed response\n\n    Args:\n        rt: Train route(s) for which to get train location information\n\n    Returns:\n        CtattPositionsResponse with train locations or ErrorResponse if error\n    \"\"\"\n    response = await AsyncTrainTracker.positions(self, rt)\n    return self._parse_response(response, CtattPositionsResponse)\n</code></pre>"},{"location":"api/train/#basetraintracker","title":"BaseTrainTracker","text":""},{"location":"api/train/#windytracker.train.base.BaseTrainTracker","title":"<code>BaseTrainTracker(key, scheme='https', domain='lapi.transitchicago.com')</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for CTA Train Tracker API clients with shared validation logic.</p> <p>Initialize the base tracker.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>_type_</code> <p>CTA API key</p> required <code>scheme</code> <code>str</code> <p>'http' or 'https'. Defaults to \"https\".</p> <code>'https'</code> <code>domain</code> <code>str</code> <p>Set for different domain name. Defaults to \"lapi.transitchicago.com\".</p> <code>'lapi.transitchicago.com'</code> Source code in <code>src/windytracker/train/base.py</code> <pre><code>@validate_arguments\ndef __init__(\n    self,\n    key,\n    scheme: str = \"https\",\n    domain: str = \"lapi.transitchicago.com\",\n):\n    \"\"\"Initialize the base tracker.\n\n    Args:\n        key (_type_): CTA API key\n        scheme (str, optional): 'http' or 'https'. Defaults to \"https\".\n        domain (str, optional): Set for different domain name. Defaults to \"lapi.transitchicago.com\".\n    \"\"\"\n    self._params = {\"key\": key, \"outputType\": \"JSON\"}\n    self._base_url = f\"{scheme}://{domain}/api/1.0/\"\n</code></pre>"},{"location":"api/train/#windytracker.train.base.BaseTrainTracker-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.base.BaseTrainTracker.arrivals","title":"<code>arrivals(mapid=None, stpid=None, max=None, rt=None)</code>  <code>abstractmethod</code>","text":"<p>Get arrival predictions for train stations</p> Source code in <code>src/windytracker/train/base.py</code> <pre><code>@abstractmethod\ndef arrivals(\n    self,\n    mapid: str | None = None,\n    stpid: str | None = None,\n    max: str | None = None,\n    rt: str | None = None,\n) -&gt; dict:\n    \"\"\"Get arrival predictions for train stations\"\"\"\n    pass\n</code></pre>"},{"location":"api/train/#windytracker.train.base.BaseTrainTracker.follow","title":"<code>follow(runnumber)</code>  <code>abstractmethod</code>","text":"<p>Follow a specific train by run number</p> Source code in <code>src/windytracker/train/base.py</code> <pre><code>@abstractmethod\ndef follow(self, runnumber: str) -&gt; dict:\n    \"\"\"Follow a specific train by run number\"\"\"\n    pass\n</code></pre>"},{"location":"api/train/#windytracker.train.base.BaseTrainTracker.positions","title":"<code>positions(rt)</code>  <code>abstractmethod</code>","text":"<p>Get locations for trains on specified routes</p> Source code in <code>src/windytracker/train/base.py</code> <pre><code>@abstractmethod\ndef positions(self, rt: str | list[str]) -&gt; dict:\n    \"\"\"Get locations for trains on specified routes\"\"\"\n    pass\n</code></pre>"},{"location":"api/train/#train-models","title":"Train Models","text":""},{"location":"api/train/#windytracker.train.models","title":"<code>models</code>","text":"<p>Pydantic models for CTA Train Tracker API responses.</p> <p>Author: Ryan Fogle</p>"},{"location":"api/train/#windytracker.train.models-classes","title":"Classes","text":""},{"location":"api/train/#windytracker.train.models.TrainTimeResponse","title":"<code>TrainTimeResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base wrapper for all CTA Train API responses</p>"},{"location":"api/train/#windytracker.train.models.Arrival","title":"<code>Arrival</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Individual train arrival prediction</p>"},{"location":"api/train/#windytracker.train.models.Arrival-attributes","title":"Attributes","text":""},{"location":"api/train/#windytracker.train.models.Arrival.prediction_datetime","title":"<code>prediction_datetime</code>  <code>property</code>","text":"<p>Get prediction time as datetime object</p>"},{"location":"api/train/#windytracker.train.models.Arrival.arrival_datetime","title":"<code>arrival_datetime</code>  <code>property</code>","text":"<p>Get arrival time as datetime object</p>"},{"location":"api/train/#windytracker.train.models.Arrival.is_approaching","title":"<code>is_approaching</code>  <code>property</code>","text":"<p>Check if train is approaching</p>"},{"location":"api/train/#windytracker.train.models.Arrival.is_scheduled","title":"<code>is_scheduled</code>  <code>property</code>","text":"<p>Check if prediction is schedule-based</p>"},{"location":"api/train/#windytracker.train.models.Arrival.is_delayed","title":"<code>is_delayed</code>  <code>property</code>","text":"<p>Check if train is delayed</p>"},{"location":"api/train/#windytracker.train.models.Arrival.has_fault","title":"<code>has_fault</code>  <code>property</code>","text":"<p>Check if train has a potential fault</p>"},{"location":"api/train/#windytracker.train.models.Arrival-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.models.Arrival.validate_station_id","title":"<code>validate_station_id(v)</code>  <code>classmethod</code>","text":"<p>Validate station ID is 5 digits in 4xxxx range</p> Source code in <code>src/windytracker/train/models.py</code> <pre><code>@field_validator(\"staId\")\n@classmethod\ndef validate_station_id(cls, v: str) -&gt; str:\n    \"\"\"Validate station ID is 5 digits in 4xxxx range\"\"\"\n    if not v.isdigit() or len(v) != 5 or not v.startswith(\"4\"):\n        raise ValueError(f\"Station ID must be 5 digits starting with 4, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/train/#windytracker.train.models.Arrival.validate_stop_id","title":"<code>validate_stop_id(v)</code>  <code>classmethod</code>","text":"<p>Validate stop ID is 5 digits in 3xxxx range</p> Source code in <code>src/windytracker/train/models.py</code> <pre><code>@field_validator(\"stpId\")\n@classmethod\ndef validate_stop_id(cls, v: str) -&gt; str:\n    \"\"\"Validate stop ID is 5 digits in 3xxxx range\"\"\"\n    if not v.isdigit() or len(v) != 5 or not v.startswith(\"3\"):\n        raise ValueError(f\"Stop ID must be 5 digits starting with 3, got: {v}\")\n    return v\n</code></pre>"},{"location":"api/train/#windytracker.train.models.Arrival.validate_datetime_format","title":"<code>validate_datetime_format(v)</code>  <code>classmethod</code>","text":"<p>Validate datetime is in correct format</p> Source code in <code>src/windytracker/train/models.py</code> <pre><code>@field_validator(\"prdt\", \"arrT\")\n@classmethod\ndef validate_datetime_format(cls, v: str) -&gt; str:\n    \"\"\"Validate datetime is in correct format\"\"\"\n    # Try ISO format first (what the API actually returns)\n    try:\n        datetime.fromisoformat(v)\n        return v\n    except ValueError:\n        pass\n\n    # Try the documented format as fallback\n    try:\n        datetime.strptime(v, \"%Y%m%d %H:%M:%S\")\n        return v\n    except ValueError:\n        raise ValueError(\n            f\"DateTime must be in ISO format (YYYY-MM-DDTHH:MM:SS) or YYYYMMDD HH:MM:SS format, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/train/#windytracker.train.models.ArrivalsResponse","title":"<code>ArrivalsResponse</code>","text":"<p>               Bases: <code>TrainTimeResponse</code></p> <p>Complete arrivals API response</p>"},{"location":"api/train/#windytracker.train.models.ArrivalsResponse-attributes","title":"Attributes","text":""},{"location":"api/train/#windytracker.train.models.ArrivalsResponse.timestamp_datetime","title":"<code>timestamp_datetime</code>  <code>property</code>","text":"<p>Get response timestamp as datetime object</p>"},{"location":"api/train/#windytracker.train.models.ArrivalsResponse.has_error","title":"<code>has_error</code>  <code>property</code>","text":"<p>Check if response has an error</p>"},{"location":"api/train/#windytracker.train.models.ArrivalsResponse.error_code","title":"<code>error_code</code>  <code>property</code>","text":"<p>Get error code as integer</p>"},{"location":"api/train/#windytracker.train.models.ArrivalsResponse-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.models.ArrivalsResponse.validate_timestamp","title":"<code>validate_timestamp(v)</code>  <code>classmethod</code>","text":"<p>Validate timestamp format</p> Source code in <code>src/windytracker/train/models.py</code> <pre><code>@field_validator(\"tmst\")\n@classmethod\ndef validate_timestamp(cls, v: str) -&gt; str:\n    \"\"\"Validate timestamp format\"\"\"\n    # Try ISO format first (what the API actually returns)\n    try:\n        datetime.fromisoformat(v)\n        return v\n    except ValueError:\n        pass\n\n    # Try the documented format as fallback\n    try:\n        datetime.strptime(v, \"%Y%m%d %H:%M:%S\")\n        return v\n    except ValueError:\n        raise ValueError(\n            f\"Timestamp must be in ISO format (YYYY-MM-DDTHH:MM:SS) or YYYYMMDD HH:MM:SS format, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/train/#windytracker.train.models.CtattResponse","title":"<code>CtattResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Root element response wrapper</p>"},{"location":"api/train/#windytracker.train.models.Position","title":"<code>Position</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Train position information</p>"},{"location":"api/train/#windytracker.train.models.FollowResponse","title":"<code>FollowResponse</code>","text":"<p>               Bases: <code>TrainTimeResponse</code></p> <p>Complete follow API response</p>"},{"location":"api/train/#windytracker.train.models.FollowResponse-attributes","title":"Attributes","text":""},{"location":"api/train/#windytracker.train.models.FollowResponse.timestamp_datetime","title":"<code>timestamp_datetime</code>  <code>property</code>","text":"<p>Get response timestamp as datetime object</p>"},{"location":"api/train/#windytracker.train.models.FollowResponse.has_error","title":"<code>has_error</code>  <code>property</code>","text":"<p>Check if response has an error</p>"},{"location":"api/train/#windytracker.train.models.FollowResponse.error_code","title":"<code>error_code</code>  <code>property</code>","text":"<p>Get error code as integer</p>"},{"location":"api/train/#windytracker.train.models.FollowResponse-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.models.FollowResponse.validate_timestamp","title":"<code>validate_timestamp(v)</code>  <code>classmethod</code>","text":"<p>Validate timestamp format</p> Source code in <code>src/windytracker/train/models.py</code> <pre><code>@field_validator(\"tmst\")\n@classmethod\ndef validate_timestamp(cls, v: str) -&gt; str:\n    \"\"\"Validate timestamp format\"\"\"\n    # Try ISO format first (what the API actually returns)\n    try:\n        datetime.fromisoformat(v)\n        return v\n    except ValueError:\n        pass\n\n    # Try the documented format as fallback\n    try:\n        datetime.strptime(v, \"%Y%m%d %H:%M:%S\")\n        return v\n    except ValueError:\n        raise ValueError(\n            f\"Timestamp must be in ISO format (YYYY-MM-DDTHH:MM:SS) or YYYYMMDD HH:MM:SS format, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/train/#windytracker.train.models.CtattFollowResponse","title":"<code>CtattFollowResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Root element response wrapper for follow API</p>"},{"location":"api/train/#windytracker.train.models.Train","title":"<code>Train</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Individual train information for positions API</p>"},{"location":"api/train/#windytracker.train.models.Train-attributes","title":"Attributes","text":""},{"location":"api/train/#windytracker.train.models.Train.prediction_datetime","title":"<code>prediction_datetime</code>  <code>property</code>","text":"<p>Get prediction time as datetime object</p>"},{"location":"api/train/#windytracker.train.models.Train.arrival_datetime","title":"<code>arrival_datetime</code>  <code>property</code>","text":"<p>Get arrival time as datetime object</p>"},{"location":"api/train/#windytracker.train.models.Train.is_approaching","title":"<code>is_approaching</code>  <code>property</code>","text":"<p>Check if train is approaching</p>"},{"location":"api/train/#windytracker.train.models.Train.is_delayed","title":"<code>is_delayed</code>  <code>property</code>","text":"<p>Check if train is delayed</p>"},{"location":"api/train/#windytracker.train.models.Train-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.models.Train.validate_datetime_format","title":"<code>validate_datetime_format(v)</code>  <code>classmethod</code>","text":"<p>Validate datetime is in correct format</p> Source code in <code>src/windytracker/train/models.py</code> <pre><code>@field_validator(\"prdt\", \"arrT\")\n@classmethod\ndef validate_datetime_format(cls, v: str) -&gt; str:\n    \"\"\"Validate datetime is in correct format\"\"\"\n    # Try ISO format first (what the API actually returns)\n    try:\n        datetime.fromisoformat(v)\n        return v\n    except ValueError:\n        pass\n\n    # Try the documented format as fallback\n    try:\n        datetime.strptime(v, \"%Y%m%d %H:%M:%S\")\n        return v\n    except ValueError:\n        raise ValueError(\n            f\"DateTime must be in ISO format (YYYY-MM-DDTHH:MM:SS) or YYYYMMDD HH:MM:SS format, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/train/#windytracker.train.models.RoutePositions","title":"<code>RoutePositions</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Route with train positions</p>"},{"location":"api/train/#windytracker.train.models.PositionsResponse","title":"<code>PositionsResponse</code>","text":"<p>               Bases: <code>TrainTimeResponse</code></p> <p>Complete positions API response</p>"},{"location":"api/train/#windytracker.train.models.PositionsResponse-attributes","title":"Attributes","text":""},{"location":"api/train/#windytracker.train.models.PositionsResponse.timestamp_datetime","title":"<code>timestamp_datetime</code>  <code>property</code>","text":"<p>Get response timestamp as datetime object</p>"},{"location":"api/train/#windytracker.train.models.PositionsResponse.has_error","title":"<code>has_error</code>  <code>property</code>","text":"<p>Check if response has an error</p>"},{"location":"api/train/#windytracker.train.models.PositionsResponse.error_code","title":"<code>error_code</code>  <code>property</code>","text":"<p>Get error code as integer</p>"},{"location":"api/train/#windytracker.train.models.PositionsResponse-functions","title":"Functions","text":""},{"location":"api/train/#windytracker.train.models.PositionsResponse.validate_timestamp","title":"<code>validate_timestamp(v)</code>  <code>classmethod</code>","text":"<p>Validate timestamp format</p> Source code in <code>src/windytracker/train/models.py</code> <pre><code>@field_validator(\"tmst\")\n@classmethod\ndef validate_timestamp(cls, v: str) -&gt; str:\n    \"\"\"Validate timestamp format\"\"\"\n    # Try ISO format first (what the API actually returns)\n    try:\n        datetime.fromisoformat(v)\n        return v\n    except ValueError:\n        pass\n\n    # Try the documented format as fallback\n    try:\n        datetime.strptime(v, \"%Y%m%d %H:%M:%S\")\n        return v\n    except ValueError:\n        raise ValueError(\n            f\"Timestamp must be in ISO format (YYYY-MM-DDTHH:MM:SS) or YYYYMMDD HH:MM:SS format, got: {v}\"\n        )\n    return v\n</code></pre>"},{"location":"api/train/#windytracker.train.models.CtattPositionsResponse","title":"<code>CtattPositionsResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Root element response wrapper for positions API</p>"}]}